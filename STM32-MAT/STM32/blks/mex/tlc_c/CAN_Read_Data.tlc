%% Abstract: CAN Read_Data 
%%    Read_Data of selected CANx
%%    Generated code is based on STM32 HAL Library files.
%%
%% Copyright 1990-2009 The MathWorks, Inc.
%assign CodeFormat = "Embedded-C"
%implements CAN_Read_Data "C"

%%warning "---------->Start CAN_Read_Data"

%if !EXISTS(::InsertIncludesToCAN)
    %assign ::InsertIncludesToCAN  = TLC_TRUE
%endif

%if !EXISTS(::InsertIncludesFromCAN)
    %assign ::InsertIncludesFromCAN  = TLC_TRUE
%endif

%if !EXISTS(::IncludeCAN_MSG)
    %assign ::IncludeCAN_MSG  = TLC_TRUE
%endif

%assign CAN_name =  SFcnParamSettings.CAN_name
%if !EXISTS(::VarDef_%<CAN_name>)
    %assign ::VarDef_%<CAN_name>  = TLC_TRUE
%endif


%% For DEBUG purposes only.
%assign ::CAN_READ_DATA_GENERATE_DEBUG_COUNTER = TLC_FALSE


%% Create function for CAN read data:

%% Code for CAN configuration call:
%function BlockInstanceSetup(block, system) void

    %%model.c and model.h files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign modelH      = LibCreateSourceFile("Header", "Simulink", SrcBaseName)
    %assign modelC      = LibCreateSourceFile("Source", "Simulink", SrcBaseName)

    %%model_CAN.h and model_CAN.c files
    %assign SrcBaseName_CAN = "%<SrcBaseName>_CAN"
    %assign modelH_CAN      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_CAN)
    %assign modelC_CAN      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_CAN)

    %assign CAN_name        =  SFcnParamSettings.CAN_name
    %assign CAN_Fifo        =  SFcnParamSettings.CAN_Fifo
    %assign CAN_MsgType =  SFcnParamSettings.CAN_MsgType

    %%Include model.h to model_CAN.c
    %if EXISTS(::InsertIncludesToCAN) && (::InsertIncludesToCAN == TLC_TRUE)
        %assign ::InsertIncludesToCAN    = TLC_FALSE
        %openfile CAN_Buf
            #include "%<SrcBaseName>.h"
            #include "%<SrcBaseName_CAN>.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelC_CAN,"Includes",CAN_Buf)>
    %endif

    %%AND Include model_CAN.h to model.c
    %if EXISTS(::InsertIncludesFromCAN) && (::InsertIncludesFromCAN == TLC_TRUE)
        %assign ::InsertIncludesFromCAN    = TLC_FALSE
        %openfile CAN_Buf
            #include "%<SrcBaseName_CAN>.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelH,"Includes",CAN_Buf)>

        %openfile CAN_Buf
            #include "STM32_Config.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelH_CAN,"Includes",CAN_Buf)>
    %endif

    %if (ISEQUAL(CAN_MsgType, "on"))
    %if EXISTS(::IncludeCAN_MSG) && (::IncludeCAN_MSG == TLC_TRUE)
        %assign ::IncludeCAN_MSG    = TLC_FALSE
        %openfile CAN_Buf
            #include "can_message.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelH_CAN,"Includes",CAN_Buf)>
    %endif
    %endif


%%Then build model_CAN.h and model_CAN.c

%% Code for required CAN external definition: in model_CAN.c file
%if (ISEQUAL(CAN_name, "CAN"))
    %assign CANNum = ""
%else
    %assign CANNum = IDNUM("%<CAN_name>")[1]
%endif

%assign fifoNum = IDNUM(CAN_Fifo)[1]
%assign CANRxFifo =  "CAN_RX_FIFO%<fifoNum>"

%if EXISTS(::VarDef_%<CAN_name>) && (::VarDef_%<CAN_name> == TLC_TRUE)
    %assign ::VarDef_%<CAN_name>    = TLC_FALSE
    %openfile CAN_Buf
        /* %<CAN_name> handler declaration. */
        extern CAN_HandleTypeDef hcan%<CANNum>;
    %closefile CAN_Buf
    %<LibSetSourceFileSection(modelH_CAN,"Defines",CAN_Buf)>
%endif

%endfunction

%% Function: Outputs ==========================================
%% Abstract:
%% Read data from CAN RX FIFO.
%%
%function Outputs(block, system) Output

    %%model_CAN.h and model_CAN.c files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign SrcBaseName_CAN = "%<SrcBaseName>_CAN"
    %assign modelH_CAN      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_CAN)
    %assign modelC_CAN      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_CAN)

    %assign CAN_name =  SFcnParamSettings.CAN_name
    %assign CAN_Fifo =  SFcnParamSettings.CAN_Fifo
    %assign CAN_MsgType =  SFcnParamSettings.CAN_MsgType

    %if (ISEQUAL(CAN_name, "CAN"))
        %assign CANNum = ""
    %else
        %assign CANNum = IDNUM("%<CAN_name>")[1]
    %endif

    %assign fifoNum = IDNUM(CAN_Fifo)[1]
    %assign CANRxFifo =  "CAN_RX_FIFO%<fifoNum>"

    %assign outDataReady = LibBlockOutputSignal(0, "", "", 0)

    {
      CAN_RxHeaderTypeDef rxHeader = {0};
      uint8_t rxData[8] = {0};

      /* Get received frame. */
      if(HAL_CAN_GetRxMessage(&hcan%<CANNum>, %<CANRxFifo>, &rxHeader, &rxData[0])!= HAL_OK) {
        %<outDataReady> = (uint8_t)0;
      }
      else {

%if ::CAN_READ_DATA_GENERATE_DEBUG_COUNTER == TLC_TRUE
        /* For debug. */
        static volatile uint32_t DEBUG_%<CAN_name>_GetRxFifo%<fifoNum>MessageCount = 0;
        DEBUG_%<CAN_name>_GetRxFifo%<fifoNum>MessageCount++;
%endif

        /* Update Read_Data:output 0: ready. */
        %<outDataReady> = (uint8_t)1;

    %if (ISEQUAL(CAN_MsgType, "on"))
    %assign can_msg = LibBlockOutputSignal(1, "", "", 0)
        {
          %<can_msg>.Extended = (uint8_T)rxHeader.IDE;
          %<can_msg>.Length = (uint8_T)rxHeader.DLC;
          %<can_msg>.Remote = (uint8_T)rxHeader.RTR;

          memcpy(%<can_msg>.Data, &rxData[0], (size_t)rxHeader.DLC);

          if(rxHeader.IDE == CAN_ID_STD){
            %<can_msg>.ID =(uint32_T)rxHeader.StdId;
          } else {
            %<can_msg>.ID =(uint32_T)rxHeader.ExtId;
          }
        }
    %else
        %assign outStandExt = LibBlockOutputSignal(1, "", "", 0)
        %assign outIdeBit = LibBlockOutputSignal(2, "", "", 0)
        %assign outDataRequest = LibBlockOutputSignal(3, "", "", 0)
        %assign outNbData = LibBlockOutputSignal(4, "", "", 0)
        %assign outData = LibBlockOutputSignal(5, "", "", 0)
        {
          /* Update output 2. */
          %<outStandExt> =(uint8_t)rxHeader.IDE;

          /* Update output 3. */
          %<outDataRequest> =(uint8_t)rxHeader.RTR;

          /* Update output 4. */
          %<outNbData> =(uint16_t)rxHeader.DLC;

          /* Update output 5. */
          memcpy(&%<outData>,&rxData[0],(size_t)rxHeader.DLC);

          if(rxHeader.IDE == CAN_ID_STD){
            %<outIdeBit> =(uint32_t)rxHeader.StdId;
          } else {
            %<outIdeBit> =(uint32_t)rxHeader.ExtId;
          }
        }
    %endif
      }
  }
%endfunction

%% [EOF] CAN_Read_Data.tlc
