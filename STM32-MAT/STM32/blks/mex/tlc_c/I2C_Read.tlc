%% Abstract: I2C_Read
%%    STM32Fxxx I2C_Read Reads a values on the selected block, code based on HAL library.
%%
%% Copyright 1990-2009 The MathWorks, Inc.

%assign CodeFormat = "Embedded-C"
%implements I2C_Read  "C"

%if !EXISTS(::InsertIncludesToI2C)
    %assign ::InsertIncludesToI2C  = TLC_TRUE
%endif
%if !EXISTS(::InsertIncludesFromI2C)
    %assign ::InsertIncludesFromI2C  = TLC_TRUE
%endif


%assign handler =  SFcnParamSettings.handler
%if !EXISTS(::Create_%<handler>)
    %assign ::Create_%<handler>  = TLC_TRUE
%endif

%if !EXISTS(::Create_READ_MASTER)
    %assign ::Create_READ_MASTER  = TLC_TRUE
%endif
%if !EXISTS(::Create_READ_SLAVE)
    %assign ::Create_READ_SLAVE  = TLC_TRUE
%endif
%if !EXISTS(::Create_R_CALLBACK_FCN)
    %assign ::Create_R_CALLBACK_FCN  = TLC_TRUE
%endif


%function BlockInstanceSetup(block, system) void
    %%model.c and model.h files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign modelH      = LibCreateSourceFile("Header", "Simulink", SrcBaseName)
    %assign modelC      = LibCreateSourceFile("Source", "Simulink", SrcBaseName)
    %%model_I2C.h and model_I2C.c files
    %assign SrcBaseName_I2C = "%<SrcBaseName>_I2C"
    %assign modelH_I2C      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_I2C)
    %assign modelC_I2C      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_I2C)

    %%Include model.h to model_I2C.c
    %if EXISTS(::InsertIncludesToI2C) && (::InsertIncludesToI2C == TLC_TRUE)
        %assign ::InsertIncludesToI2C    = TLC_FALSE
        %openfile I2C_Buf
            #include "%<SrcBaseName>.h"
            #include "%<SrcBaseName_I2C>.h"
        %closefile I2C_Buf
        %<LibSetSourceFileSection(modelC_I2C,"Includes",I2C_Buf)>
    %endif

    %%AND Include model_I2C.h to model.c
    %if EXISTS(::InsertIncludesFromI2C) && (::InsertIncludesFromI2C == TLC_TRUE)
        %assign ::InsertIncludesFromI2C    = TLC_FALSE
        %openfile I2C_Buf
            #include "%<SrcBaseName_I2C>.h"
        %closefile I2C_Buf
        %<LibSetSourceFileSection(modelH,"Includes",I2C_Buf)>

        %openfile I2C_Buf
            #include "STM32_Config.h"
        %closefile I2C_Buf
        %<LibSetSourceFileSection(modelH_I2C,"Includes",I2C_Buf)>
    %endif


    %assign Device_Mode =  SFcnParamSettings.Device_Mode
    %assign i2c_Mode = SFcnParamSettings.i2c_Mode
    %assign Timeout = SFcnParamSettings.TimeoutValue
    %assign Buffer_Size = SFcnParamSettings.Buffer_Size
    %assign block_name =  block.Identifier
    %assign i2cx =  SFcnParamSettings.i2cx
    %assign handler =  SFcnParamSettings.handler
    %assign Enable_Output =  SFcnParamSettings.Enable_Output
    %assign Error = SFcnParamSettings.Error
    %assign CallBack = SFcnParamSettings.CallBack

    %openfile I2C_Read_Buf
            /* User's Defines for %<block_name> */
            #define %<block_name>_RX_BUFFER_SIZE %<Buffer_Size>

    %if (ISEQUAL(i2c_Mode, "IT"))
        %if (ISEQUAL(Device_Mode, "MASTER"))
          %if !EXISTS(::I2C_TIMEOUT_FLAG)
              %assign ::I2C_TIMEOUT_FLAG  = %<Timeout>
            #ifdef I2C_TIMEOUT_FLAG
            #undef  I2C_TIMEOUT_FLAG
            #define I2C_TIMEOUT_FLAG ((uint32_t)%<Timeout>) /* %<Timeout> ms */
            #endif

          %elseif (::I2C_TIMEOUT_FLAG < %<Timeout>)
              %assign ::I2C_TIMEOUT_FLAG  = %<Timeout>
            #ifdef I2C_TIMEOUT_FLAG
            #undef  I2C_TIMEOUT_FLAG
            #define I2C_TIMEOUT_FLAG ((uint32_t)%<Timeout>) /* %<Timeout> ms */
            #endif
          %endif
        %endif
    %elseif (ISEQUAL(i2c_Mode, "DMA_TX")|| ISEQUAL(i2c_Mode, "DMA_RX_TX")|| ISEQUAL(i2c_Mode, "DMA_RX"))
        %if (ISEQUAL(Device_Mode, "MASTER"))
          %if !EXISTS(::I2C_TIMEOUT_FLAG)
              %assign ::I2C_TIMEOUT_FLAG  = %<Timeout>
            #ifdef I2C_TIMEOUT_FLAG
            #undef  I2C_TIMEOUT_FLAG
            #define I2C_TIMEOUT_FLAG ((uint32_t)%<Timeout>) /* %<Timeout> ms */
            #endif

          %elseif (::I2C_TIMEOUT_FLAG < %<Timeout>)
              %assign ::I2C_TIMEOUT_FLAG  = %<Timeout>
            #ifdef I2C_TIMEOUT_FLAG
            #undef  I2C_TIMEOUT_FLAG
            #define I2C_TIMEOUT_FLAG ((uint32_t)%<Timeout>) /* %<Timeout> ms */
            #endif
          %endif
        %else
          %if !EXISTS(::I2C_TIMEOUT_ADRR_SLAVE)
              %assign ::I2C_TIMEOUT_ADRR_SLAVE  = %<Timeout>
            #ifdef I2C_TIMEOUT_ADRR_SLAVE
            #undef  I2C_TIMEOUT_ADRR_SLAVE
            #define I2C_TIMEOUT_ADRR_SLAVE ((uint32_t)%<Timeout>) /* %<Timeout> ms */
            #endif

          %elseif (::I2C_TIMEOUT_ADRR_SLAVE < %<Timeout>)
              %assign ::I2C_TIMEOUT_ADRR_SLAVE  = %<Timeout>
            #ifdef I2C_TIMEOUT_ADRR_SLAVE
            #undef  I2C_TIMEOUT_ADRR_SLAVE
            #define I2C_TIMEOUT_ADRR_SLAVE ((uint32_t)%<Timeout>) /* %<Timeout> ms */
            #endif
          %endif
        %endif
    %else
            #define %<block_name>_I2C_TIMEOUT_POLLING ((uint32_t)%<Timeout>) /* %<Timeout> ms */
    %endif
    %closefile I2C_Read_Buf
    %<LibSetSourceFileSection(modelH_I2C,"Defines",I2C_Read_Buf)>

    %if EXISTS(::Create_%<handler>) && (::Create_%<handler> == TLC_TRUE)
        %assign ::Create_%<handler>   = TLC_FALSE

    %openfile I2C_Read_Buf
        /* %<i2cx> handler declaration. */
        extern I2C_HandleTypeDef %<handler>;
    %closefile I2C_Read_Buf
    %<LibSetSourceFileSection(modelH_I2C,"Declarations",I2C_Read_Buf)>
    %endif


    %if(ISEQUAL(CallBack, "on"))
       %if EXISTS(::Create_R_CALLBACK_FCN) && (::Create_R_CALLBACK_FCN == TLC_TRUE)
           %assign ::Create_R_CALLBACK_FCN   = TLC_FALSE

        %openfile I2C_Read_Buf
        /* Blockset I2C Rx CallBack declaration. */
        extern void (* ItCallBackRxFcn)(void);
        %closefile I2C_Read_Buf
        %<LibSetSourceFileSection(modelH_I2C,"Defines",I2C_Read_Buf)>

        %openfile I2C_Read_Buf
        /* Blockset I2C Rx CallBack definition. */
        void (* ItCallBackRxFcn)(void) = NULL;
        %closefile I2C_Read_Buf
        %<LibSetSourceFileSection(modelC_I2C,"Defines",I2C_Read_Buf)>
       %endif
    %endif


    %if(ISEQUAL(CallBack, "on"))
       %openfile I2C_Read_Buf
        %if(ISEQUAL(Device_Mode, "MASTER"))
        %if EXISTS(::Create_READ_MASTER) && (::Create_READ_MASTER == TLC_TRUE)
            %assign ::Create_READ_MASTER   = TLC_FALSE
            /*******************************************************************************
            * Function Name  : HAL_I2C_MasterRxCpltCallback
            * Description    : Handler for I2C read complete callback
            * Input          : None
            *******************************************************************************/
            void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef * hi2c)
            {
              if(ItCallBackRxFcn != NULL){
                /* Call Blockset CallBack function */
                ItCallBackRxFcn();
              }
            }
        %endif

        %else
        %if EXISTS(::Create_READ_SLAVE) && (::Create_READ_SLAVE == TLC_TRUE)
            %assign ::Create_READ_SLAVE  = TLC_FALSE
            /*******************************************************************************
            * Function Name  : HAL_I2C_SlaveRxCpltCallback
            * Description    : Handler for I2C read complete callback
            * Input          : None
            *******************************************************************************/
            void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef * hi2c)
            {
              if(ItCallBackRxFcn != NULL){
                /* Call Blockset CallBack function */
                ItCallBackRxFcn();
              }
            }
        %endif
        %endif
       %closefile I2C_Read_Buf
       %<LibSetSourceFileSection(modelC_I2C,"UserBottom",I2C_Read_Buf)>
    %endif

    %if !EXISTS(::%<block_name>_aRxBuffer)
        %assign ::%<block_name>_aRxBuffer = TLC_TRUE
        %openfile I2C_Read_Buf
            /* User's Data declarations for %<block_name> */
            uint8_t %<block_name>_aRxBuffer[%<block_name>_RX_BUFFER_SIZE];
        %if (ISEQUAL(Enable_Output, "on"))
            uint8_t * %<block_name>_BufferPt = NULL;
        %endif
        %closefile I2C_Read_Buf
        %<LibSetSourceFileSection(modelC_I2C,"Declarations",I2C_Read_Buf)>


        %openfile I2C_Read_Buf
            /* User's Data declarations for %<block_name> */
            extern uint8_t %<block_name>_aRxBuffer[%<block_name>_RX_BUFFER_SIZE];
        %if (ISEQUAL(Enable_Output, "on"))
            extern uint8_t * %<block_name>_BufferPt;
        %endif
        %closefile I2C_Read_Buf
        %<LibSetSourceFileSection(modelH_I2C,"Declarations",I2C_Read_Buf)>
    %endif

%endfunction

%% Function: Outputs ==========================================
%% Abstract:
%% I2C_Read input value depending on pin config
%%
%function Outputs(block, system) Output
    %%model.c and model.h files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %%model_I2C.h and model_I2C.c files
    %assign SrcBaseName_I2C = "%<SrcBaseName>_I2C"
    %assign modelH_I2C      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_I2C)
    %assign modelC_I2C      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_I2C)

    %assign block_name =  block.Identifier
    %assign i2cx =  SFcnParamSettings.i2cx
    %assign i2c_Mode =  SFcnParamSettings.i2c_Mode
    %assign Device_Mode =  SFcnParamSettings.Device_Mode
    %assign handler =  SFcnParamSettings.handler
    %assign Enable_Output =  SFcnParamSettings.Enable_Output
    %assign Error = SFcnParamSettings.Error
    %assign CallBack = SFcnParamSettings.CallBack

    {

    %if(ISEQUAL(CallBack, "on"))
        ItCallBackRxFcn = %<block_name>_CallBack_Handler;
    %else
    %if EXISTS(::Create_R_CALLBACK_FCN) && (::Create_R_CALLBACK_FCN == TLC_FALSE)
        ItCallBackRxFcn = NULL;
    %endif
    %endif

    %if (ISEQUAL(Device_Mode, "MASTER"))
        %assign Target_Address =  SFcnParamSettings.Target_Address

        %if (ISEQUAL(i2c_Mode, "DMA_TX")|| ISEQUAL(i2c_Mode, "DMA_RX_TX")|| ISEQUAL(i2c_Mode, "DMA_RX"))
            /* I2C Receive with DMA */
            if(HAL_I2C_Master_Receive_DMA(&%<handler>,(uint16_t)%<Target_Address>, (uint8_t*)%<block_name>_aRxBuffer, %<block_name>_RX_BUFFER_SIZE)!= HAL_OK)

        %elseif (ISEQUAL(i2c_Mode, "IT"))
            /* I2C Receive with IT */
            if(HAL_I2C_Master_Receive_IT(&%<handler>, (uint16_t)%<Target_Address>,(uint8_t*)%<block_name>_aRxBuffer, %<block_name>_RX_BUFFER_SIZE)!= HAL_OK)

        %else
            /* I2C Receive by Polling */
            if(HAL_I2C_Master_Receive(&%<handler>, (uint16_t)%<Target_Address>,(uint8_t*)%<block_name>_aRxBuffer, %<block_name>_RX_BUFFER_SIZE,%<block_name>_I2C_TIMEOUT_POLLING )!= HAL_OK)
        %endif

    %else
        %if (ISEQUAL(i2c_Mode, "DMA_TX")|| ISEQUAL(i2c_Mode, "DMA_RX_TX")|| ISEQUAL(i2c_Mode, "DMA_RX"))
            /* I2C Receive with DMA */
            if(HAL_I2C_Slave_Receive_DMA(&%<handler>, (uint8_t*)%<block_name>_aRxBuffer, %<block_name>_RX_BUFFER_SIZE)!= HAL_OK)

        %elseif (ISEQUAL(i2c_Mode, "IT"))
            /* I2C Receive with IT */
            if(HAL_I2C_Slave_Receive_IT(&%<handler>,(uint8_t*)%<block_name>_aRxBuffer, %<block_name>_RX_BUFFER_SIZE)!= HAL_OK)

        %else
            /* I2C Receive by Polling */
            if(HAL_I2C_Slave_Receive(&%<handler>, (uint8_t*)%<block_name>_aRxBuffer, %<block_name>_RX_BUFFER_SIZE,%<block_name>_I2C_TIMEOUT_POLLING )!= HAL_OK)
            %endif
    %endif

            {
                %if(ISEQUAL(Error, "on"))
                /*  %<block_name>_Error_Handler() function is called when Timeout error occurs
                When Acknowledge failure occurs the Master Board restarts communication */
                if (HAL_I2C_GetError(&%<handler>) != HAL_I2C_ERROR_AF)
                {
                  %<block_name>_Error_Handler();
                }
                %else
                /* Error not managed */
                %endif
            } else {
                while (HAL_I2C_GetState(&%<handler>) != HAL_I2C_STATE_READY){}
            }
    %if (ISEQUAL(Enable_Output, "on"))
            %if( ISEQUAL(i2c_Mode,"IT")==TLC_FALSE && ISEQUAL(i2c_Mode,"_IT")==TLC_FALSE && ISEQUAL(i2c_Mode,"DMA")==TLC_FALSE && ISEQUAL(i2c_Mode,"__DMA")==TLC_FALSE )
            %<block_name>_BufferPt = %<block_name>_aRxBuffer;
            %else
            %<block_name>_BufferPt = %<handler>.pBuffPtr;
            %endif
            {
                uint32_t idx = 0;
                %if(ISEQUAL(Error, "on") || ISEQUAL(CallBack, "on"))
                while(idx < %<block_name>_RX_BUFFER_SIZE){
                    %<LibBlockOutputSignal(1, "idx", "", 0)> = *%<block_name>_BufferPt;
                    idx++;
                    %<block_name>_BufferPt++;
                }
                %else
                while(idx < %<block_name>_RX_BUFFER_SIZE){
                    %<LibBlockOutputSignal(0, "idx", "", 0)> = *%<block_name>_BufferPt;
                    idx++;
                    %<block_name>_BufferPt++;
                }
                %endif
            }
    %endif
    }


    %if (ISEQUAL(Error, "on"))
        %openfile I2C_Read_Buf
        /* %<block_name>_Error_Handler declaration. */
        void %<block_name>_Error_Handler(void);
        %closefile I2C_Read_Buf
        %<LibSetSourceFileSection(modelH_I2C,"Defines",I2C_Read_Buf)>

        %openfile I2C_Read_Buf
        /*******************************************************************************
        * Function Name  : %<block_name>_Error_Handler
        * Description    : Handler for I2C Timeout error
        * Input          : None
        *******************************************************************************/
        void %<block_name>_Error_Handler(void)
        {
            %foreach callIdx = NumSFcnSysOutputCalls
                %if (ISEQUAL(callIdx, 0))
                    %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                        %assign wrnTxt = "No code will be generated for Read Error  "\
                        "since it is not connected to a system."
                        %<LibReportWarning(wrnTxt)>
                        %continue
                    %endif
                    %% call the downstream system
                    %<LibBlockExecuteFcnCall(block, callIdx)>\
                %endif
            %endforeach
        }
        %closefile I2C_Read_Buf
        %<LibSetSourceFileSection(modelC_I2C,"Functions",I2C_Read_Buf)>
    %endif

    %if !EXISTS(::%<block_name>_CallBack_Handler)
        %assign ::%<block_name>_CallBack_Handler = TLC_TRUE
        %if (ISEQUAL(CallBack, "on"))
            %openfile I2C_Read_Buf
            /* %<block_name>_CallBack_Handler declaration. */
            void %<block_name>_CallBack_Handler(void);
            %closefile I2C_Read_Buf
            %<LibSetSourceFileSection(modelH_I2C,"Defines",I2C_Read_Buf)>

            %openfile I2C_Read_Buf
            /*******************************************************************************
            * Function Name  : %<block_name>_CallBack_Handler
            * Description    : Function called from I2C read complete callback
            * Input          : None
            *******************************************************************************/
            void %<block_name>_CallBack_Handler(void)
            {
                %foreach callIdx = NumSFcnSysOutputCalls
                    %if (ISEQUAL(Error,"off") && ISEQUAL(callIdx, 0))
                        %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Read complete  "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                            %continue
                        %endif
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, callIdx)>\
                    %elseif  (ISEQUAL(Error,"on") && ISEQUAL(callIdx, 1))
                        %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Read complete  "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                            %continue
                        %endif
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, callIdx)>\
                    %endif
                %endforeach
            }
            %closefile I2C_Read_Buf
            %<LibSetSourceFileSection(modelC_I2C,"Functions",I2C_Read_Buf)>
        %endif
    %endif

%endfunction

%% [EOF] I2C_Read.tlc