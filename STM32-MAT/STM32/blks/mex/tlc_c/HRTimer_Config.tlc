%% Abstract: HRTimer_Config
%%    STM32 HR Timers configuration
%%    Generated code is based on STM32 HAL Library files.
%%
%% Copyright 1990-2009 The MathWorks, Inc.
%assign CodeFormat = "Embedded-C"
%implements HRTimer_Config "C"

%include "FunctionCalledAsChart.tlc"

%%warning "---------->Start HRTimers"

%if !EXISTS(::CreateHRTimers)
    %assign ::CreateHRTimers  = TLC_TRUE
%endif

%if !EXISTS(::InsertIncludesToHRTIM)
    %assign ::InsertIncludesToHRTIM  = TLC_TRUE
%endif

%if !EXISTS(::InsertIncludesFromHRTIM)
    %assign ::InsertIncludesFromHRTIM  = TLC_TRUE
%endif

%if !EXISTS(::InsertHRTIM)
    %assign ::InsertHRTIM  = TLC_TRUE
%endif

%if !EXISTS(::InsertHRTIMInit)
    %assign ::InsertHRTIMInit  = TLC_TRUE
%endif

%if !EXISTS(::HRTIM_IRQ_F1)
    %assign ::HRTIM_IRQ_F1  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_F2)
    %assign ::HRTIM_IRQ_F2  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_F3)
    %assign ::HRTIM_IRQ_F3  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_F4)
    %assign ::HRTIM_IRQ_F4  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_F5)
    %assign ::HRTIM_IRQ_F5  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_F6)
    %assign ::HRTIM_IRQ_F6  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_SF)
    %assign ::HRTIM_IRQ_SF  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_BMP)
    %assign ::HRTIM_IRQ_BMP  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_DLLCALL)
    %assign ::HRTIM_IRQ_DLLCALL  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_SYNC)
    %assign ::HRTIM_IRQ_SYNC  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_BURST_DMA)
    %assign ::HRTIM_IRQ_BURST_DMA  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_DMA_ERR)
    %assign ::HRTIM_IRQ_DMA_ERR  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_UPD)
    %assign ::HRTIM_IRQ_UPD  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_REP)
    %assign ::HRTIM_IRQ_REP  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_COMP1)
    %assign ::HRTIM_IRQ_COMP1  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_COMP2)
    %assign ::HRTIM_IRQ_COMP2  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_COMP3)
    %assign ::HRTIM_IRQ_COMP3  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_COMP4)
    %assign ::HRTIM_IRQ_COMP4  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_CAPT1)
    %assign ::HRTIM_IRQ_CAPT1  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_CAPT2)
    %assign ::HRTIM_IRQ_CAPT2  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_DEL)
    %assign ::HRTIM_IRQ_DEL  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_RESET_CPT)
    %assign ::HRTIM_IRQ_RESET_CPT  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_OUT1S)
    %assign ::HRTIM_IRQ_OUT1S  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_OUT1R)
    %assign ::HRTIM_IRQ_OUT1R  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_OUT2S)
    %assign ::HRTIM_IRQ_OUT2S  = TLC_TRUE
%endif
%if !EXISTS(::HRTIM_IRQ_OUT2R)
    %assign ::HRTIM_IRQ_OUT2R  = TLC_TRUE
%endif

%assign ::CreateHRTimers  = TLC_TRUE

%%trace CreateHRTimers  %<CreateHRTimers>


%% Create function for HRTimers:
%if EXISTS(CreateHRTimers) && (CreateHRTimers == TLC_TRUE)

    %%assign ::CreateHRTimers = TLC_FALSE


%% Code for system initialization:
%function Start(block,system) Output
    %assign HRTIM_Name = SFcnParamSettings.HRTIM_Name
    %if EXISTS(::InsertHRTIMInit) && (::InsertHRTIMInit == TLC_TRUE)
        %assign ::InsertHRTIMInit    = TLC_FALSE
        %openfile HRTIM_Buf
        /* %<HRTIM_Name> initialization */
        %<HRTIM_Name>_Initialization();
        %closefile HRTIM_Buf
        %<LibMdlStartCustomCode(HRTIM_Buf,"execution")>
    %endif
%endfunction


%% Code for HRTimers configuration call:
%function BlockInstanceSetup(block, system) void
    %% model.c and model.h files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign modelH      = LibCreateSourceFile("Header", "Simulink", SrcBaseName)
    %assign modelC      = LibCreateSourceFile("Source", "Simulink", SrcBaseName)
    %% model_HRTIM.h and model_HRTIM.c files
    %assign SrcBaseName_HRTIM = "%<SrcBaseName>_HRTIM"
    %assign modelH_HRTIM      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_HRTIM)
    %assign modelC_HRTIM      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_HRTIM)
    %% Include model.h to model_HRTIM.c
    %if EXISTS(::InsertIncludesToHRTIM) && (::InsertIncludesToHRTIM == TLC_TRUE)
        %assign ::InsertIncludesToHRTIM    = TLC_FALSE
        %openfile HRTIM_Buf
            #include "%<SrcBaseName>.h"
            #include "%<SrcBaseName_HRTIM>.h"
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelC_HRTIM,"Includes",HRTIM_Buf)>
    %endif
    %%AND Include model_HRTIM.h to model.c
    %if EXISTS(::InsertIncludesFromHRTIM) && (::InsertIncludesFromHRTIM == TLC_TRUE)
        %assign ::InsertIncludesFromHRTIM    = TLC_FALSE
        %openfile HRTIM_Buf
            #include "%<SrcBaseName_HRTIM>.h"
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelH,"Includes",HRTIM_Buf)>

        %openfile HRTIM_Buf
            #include "STM32_Config.h"
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelH_HRTIM,"Includes",HRTIM_Buf)>
    %endif

    %%%%%%%%%%%%%%%%%%%%%% HRTIM %%%%%%%%%%%%%%%%%%%%%%%%%
    %assign NbHRTim  = SFcnParamSettings.NbHRTim
    %assign HRTIM_Name = SFcnParamSettings.HRTIM_Name
    %assign HRTIM_Clock = SFcnParamSettings.HRTIM_Clock
    %assign TIM_IRQ_F1 = SFcnParamSettings.TIM_IRQ_F1
    %assign TIM_IRQ_F2 = SFcnParamSettings.TIM_IRQ_F2
    %assign TIM_IRQ_F3 = SFcnParamSettings.TIM_IRQ_F3
    %assign TIM_IRQ_F4 = SFcnParamSettings.TIM_IRQ_F4
    %assign TIM_IRQ_F5 = SFcnParamSettings.TIM_IRQ_F5
    %assign TIM_IRQ_F6 = SFcnParamSettings.TIM_IRQ_F6
    %assign TIM_IRQ_SF = SFcnParamSettings.TIM_IRQ_SF
    %assign TIM_IRQ_BMP = SFcnParamSettings.TIM_IRQ_BMP
    %assign TIM_IRQ_DLLCALL = SFcnParamSettings.TIM_IRQ_DLLCALL
    %assign TIM_IRQ_SYNC = SFcnParamSettings.TIM_IRQ_SYNC
    %assign TIM_IRQ_BURST_DMA = SFcnParamSettings.TIM_IRQ_BURST_DMA
    %assign TIM_IRQ_DMA_ERR = SFcnParamSettings.TIM_IRQ_DMA_ERR
    %assign M_DMA = SFcnParamSettings.M_DMA
    %assign M_IT_global = SFcnParamSettings.M_IT_global
    %assign M_Tim_div = SFcnParamSettings.M_Tim_div
    %assign M_Period = SFcnParamSettings.M_Period
    %assign M_PWM_Period = SFcnParamSettings.M_PWM_Period
    %assign M_Unit1 = SFcnParamSettings.M_Unit1
    %assign M_Unit2 = SFcnParamSettings.M_Unit2
    %assign M_Unit3 = SFcnParamSettings.M_Unit3
    %assign M_Unit4 = SFcnParamSettings.M_Unit4
    %assign TIM_IRQ_UPDM = SFcnParamSettings.TIM_IRQ_UPDM
    %assign TIM_IRQ_REPM = SFcnParamSettings.TIM_IRQ_REPM
    %assign TIM_IRQ_COMP1 = SFcnParamSettings.TIM_IRQ_COMP1
    %assign TIM_IRQ_COMP2 = SFcnParamSettings.TIM_IRQ_COMP2
    %assign TIM_IRQ_COMP3 = SFcnParamSettings.TIM_IRQ_COMP3
    %assign TIM_IRQ_COMP4 = SFcnParamSettings.TIM_IRQ_COMP4
    %assign A_Mode = SFcnParamSettings.A_Mode
    %assign A_DMA = SFcnParamSettings.A_DMA
    %assign A_IT_global = SFcnParamSettings.A_IT_global
    %assign A_Tim_div = SFcnParamSettings.A_Tim_div
    %assign A_Period = SFcnParamSettings.A_Period
    %assign A_PWM_Period = SFcnParamSettings.A_PWM_Period
    %assign A_Capture1 = SFcnParamSettings.A_Capture1
    %assign A_Capture2 = SFcnParamSettings.A_Capture2
    %assign TA1_Enable = SFcnParamSettings.TA1_Enable
    %assign TA1_Polarity = SFcnParamSettings.TA1_Polarity
    %assign TA1_Chopper = SFcnParamSettings.TA1_Chopper
    %assign TA2_Enable = SFcnParamSettings.TA2_Enable
    %assign TA2_Polarity = SFcnParamSettings.TA2_Polarity
    %assign TA2_Chopper = SFcnParamSettings.TA2_Chopper
    %assign A_Unit1 = SFcnParamSettings.A_Unit1
    %assign A_Unit2 = SFcnParamSettings.A_Unit2
    %assign A_Unit3 = SFcnParamSettings.A_Unit3
    %assign A_Unit4 = SFcnParamSettings.A_Unit4
    %assign A_Output_Comp1 = SFcnParamSettings.A_Output_Comp1
    %assign A_Comp_Polarity1 = SFcnParamSettings.A_Comp_Polarity1
    %assign A_CompVal1 = SFcnParamSettings.A_CompVal1
    %assign A_Output_Comp2 = SFcnParamSettings.A_Output_Comp2
    %assign A_Comp_Polarity2 = SFcnParamSettings.A_Comp_Polarity2
    %assign A_CompVal2 = SFcnParamSettings.A_CompVal2
    %assign A_Output_PWM1 = SFcnParamSettings.A_Output_PWM1
    %assign A_Output_Polarity1 = SFcnParamSettings.A_Output_Polarity1
    %assign A_DutyVal1 = SFcnParamSettings.A_DutyVal1
    %assign A_DutyIn1 = SFcnParamSettings.A_DutyIn1
    %assign A_Output_PWM2 = SFcnParamSettings.A_Output_PWM2
    %assign A_Output_Polarity2 = SFcnParamSettings.A_Output_Polarity2
    %assign A_DutyVal2 = SFcnParamSettings.A_DutyVal2
    %assign A_DutyIn2 = SFcnParamSettings.A_DutyIn2
    %assign A_OnePulse1 = SFcnParamSettings.A_OnePulse1
    %assign A_OnePulse_Polarity1 = SFcnParamSettings.A_OnePulse_Polarity1
    %assign A_OnePulse_CompVal1 = SFcnParamSettings.A_OnePulse_CompVal1
    %assign A_OnePulse2 = SFcnParamSettings.A_OnePulse2
    %assign A_OnePulse_Polarity2 = SFcnParamSettings.A_OnePulse_Polarity2
    %assign A_OnePulse_CompVal2 = SFcnParamSettings.A_OnePulse_CompVal2
    %assign TIM_IRQ_UPDA = SFcnParamSettings.TIM_IRQ_UPDA
    %assign TIM_IRQ_REPA = SFcnParamSettings.TIM_IRQ_REPA
    %assign TIM_IRQ_COMP1A = SFcnParamSettings.TIM_IRQ_COMP1A
    %assign TIM_IRQ_COMP2A = SFcnParamSettings.TIM_IRQ_COMP2A
    %assign TIM_IRQ_COMP3A = SFcnParamSettings.TIM_IRQ_COMP3A
    %assign TIM_IRQ_COMP4A = SFcnParamSettings.TIM_IRQ_COMP4A
    %assign TIM_IRQ_CAPT1A = SFcnParamSettings.TIM_IRQ_CAPT1A
    %assign TIM_IRQ_CAPT2A = SFcnParamSettings.TIM_IRQ_CAPT2A
    %assign TIM_IRQ_DELA = SFcnParamSettings.TIM_IRQ_DELA
    %assign TIM_IRQ_RESET_CPTA = SFcnParamSettings.TIM_IRQ_RESET_CPTA
    %assign TIM_IRQ_OUT1SA = SFcnParamSettings.TIM_IRQ_OUT1SA
    %assign TIM_IRQ_OUT1RA = SFcnParamSettings.TIM_IRQ_OUT1RA
    %assign TIM_IRQ_OUT2SA = SFcnParamSettings.TIM_IRQ_OUT2SA
    %assign TIM_IRQ_OUT2RA = SFcnParamSettings.TIM_IRQ_OUT2RA
    %assign B_Mode = SFcnParamSettings.B_Mode
    %assign B_DMA = SFcnParamSettings.B_DMA
    %assign B_IT_global = SFcnParamSettings.B_IT_global
    %assign B_Tim_div = SFcnParamSettings.B_Tim_div
    %assign B_Period = SFcnParamSettings.B_Period
    %assign B_PWM_Period = SFcnParamSettings.B_PWM_Period
    %assign B_Capture1 = SFcnParamSettings.B_Capture1
    %assign B_Capture2 = SFcnParamSettings.B_Capture2
    %assign TB1_Enable = SFcnParamSettings.TB1_Enable
    %assign TB1_Polarity = SFcnParamSettings.TB1_Polarity
    %assign TB1_Chopper = SFcnParamSettings.TB1_Chopper
    %assign TB2_Enable = SFcnParamSettings.TB2_Enable
    %assign TB2_Polarity = SFcnParamSettings.TB2_Polarity
    %assign TB2_Chopper = SFcnParamSettings.TB2_Chopper
    %assign B_Unit1 = SFcnParamSettings.B_Unit1
    %assign B_Unit2 = SFcnParamSettings.B_Unit2
    %assign B_Unit3 = SFcnParamSettings.B_Unit3
    %assign B_Unit4 = SFcnParamSettings.B_Unit4
    %assign B_Output_Comp1 = SFcnParamSettings.B_Output_Comp1
    %assign B_Comp_Polarity1 = SFcnParamSettings.B_Comp_Polarity1
    %assign B_CompVal1 = SFcnParamSettings.B_CompVal1
    %assign B_Output_Comp2 = SFcnParamSettings.B_Output_Comp2
    %assign B_Comp_Polarity2 = SFcnParamSettings.B_Comp_Polarity2
    %assign B_CompVal2 = SFcnParamSettings.B_CompVal2
    %assign B_Output_PWM1 = SFcnParamSettings.B_Output_PWM1
    %assign B_Output_Polarity1 = SFcnParamSettings.B_Output_Polarity1
    %assign B_DutyVal1 = SFcnParamSettings.B_DutyVal1
    %assign B_DutyIn1 = SFcnParamSettings.B_DutyIn1
    %assign B_Output_PWM2 = SFcnParamSettings.B_Output_PWM2
    %assign B_Output_Polarity2 = SFcnParamSettings.B_Output_Polarity2
    %assign B_DutyVal2 = SFcnParamSettings.B_DutyVal2
    %assign B_DutyIn2 = SFcnParamSettings.B_DutyIn2
    %assign B_OnePulse1 = SFcnParamSettings.B_OnePulse1
    %assign B_OnePulse_Polarity1 = SFcnParamSettings.B_OnePulse_Polarity1
    %assign B_OnePulse_CompVal1 = SFcnParamSettings.B_OnePulse_CompVal1
    %assign B_OnePulse2 = SFcnParamSettings.B_OnePulse2
    %assign B_OnePulse_Polarity2 = SFcnParamSettings.B_OnePulse_Polarity2
    %assign B_OnePulse_CompVal2 = SFcnParamSettings.B_OnePulse_CompVal2
    %assign TIM_IRQ_UPDB = SFcnParamSettings.TIM_IRQ_UPDB
    %assign TIM_IRQ_REPB = SFcnParamSettings.TIM_IRQ_REPB
    %assign TIM_IRQ_COMP1B = SFcnParamSettings.TIM_IRQ_COMP1B
    %assign TIM_IRQ_COMP2B = SFcnParamSettings.TIM_IRQ_COMP2B
    %assign TIM_IRQ_COMP3B = SFcnParamSettings.TIM_IRQ_COMP3B
    %assign TIM_IRQ_COMP4B = SFcnParamSettings.TIM_IRQ_COMP4B
    %assign TIM_IRQ_CAPT1B = SFcnParamSettings.TIM_IRQ_CAPT1B
    %assign TIM_IRQ_CAPT2B = SFcnParamSettings.TIM_IRQ_CAPT2B
    %assign TIM_IRQ_DELB = SFcnParamSettings.TIM_IRQ_DELB
    %assign TIM_IRQ_RESET_CPTB = SFcnParamSettings.TIM_IRQ_RESET_CPTB
    %assign TIM_IRQ_OUT1SB = SFcnParamSettings.TIM_IRQ_OUT1SB
    %assign TIM_IRQ_OUT1RB = SFcnParamSettings.TIM_IRQ_OUT1RB
    %assign TIM_IRQ_OUT2SB = SFcnParamSettings.TIM_IRQ_OUT2SB
    %assign TIM_IRQ_OUT2RB = SFcnParamSettings.TIM_IRQ_OUT2RB
    %assign C_Mode = SFcnParamSettings.C_Mode
    %assign C_DMA = SFcnParamSettings.C_DMA
    %assign C_IT_global = SFcnParamSettings.C_IT_global
    %assign C_Tim_div = SFcnParamSettings.C_Tim_div
    %assign C_Period = SFcnParamSettings.C_Period
    %assign C_PWM_Period = SFcnParamSettings.C_PWM_Period
    %assign C_Capture1 = SFcnParamSettings.C_Capture1
    %assign C_Capture2 = SFcnParamSettings.C_Capture2
    %assign TC1_Enable = SFcnParamSettings.TC1_Enable
    %assign TC1_Polarity = SFcnParamSettings.TC1_Polarity
    %assign TC1_Chopper = SFcnParamSettings.TC1_Chopper
    %assign TC2_Enable = SFcnParamSettings.TC2_Enable
    %assign TC2_Polarity = SFcnParamSettings.TC2_Polarity
    %assign TC2_Chopper = SFcnParamSettings.TC2_Chopper
    %assign C_Unit1 = SFcnParamSettings.C_Unit1
    %assign C_Unit2 = SFcnParamSettings.C_Unit2
    %assign C_Unit3 = SFcnParamSettings.C_Unit3
    %assign C_Unit4 = SFcnParamSettings.C_Unit4
    %assign C_Output_Comp1 = SFcnParamSettings.C_Output_Comp1
    %assign C_Comp_Polarity1 = SFcnParamSettings.C_Comp_Polarity1
    %assign C_CompVal1 = SFcnParamSettings.C_CompVal1
    %assign C_Output_Comp2 = SFcnParamSettings.C_Output_Comp2
    %assign C_Comp_Polarity2 = SFcnParamSettings.C_Comp_Polarity2
    %assign C_CompVal2 = SFcnParamSettings.C_CompVal2
    %assign C_Output_PWM1 = SFcnParamSettings.C_Output_PWM1
    %assign C_Output_Polarity1 = SFcnParamSettings.C_Output_Polarity1
    %assign C_DutyVal1 = SFcnParamSettings.C_DutyVal1
    %assign C_DutyIn1 = SFcnParamSettings.C_DutyIn1
    %assign C_Output_PWM2 = SFcnParamSettings.C_Output_PWM2
    %assign C_Output_Polarity2 = SFcnParamSettings.C_Output_Polarity2
    %assign C_DutyVal2 = SFcnParamSettings.C_DutyVal2
    %assign C_DutyIn2 = SFcnParamSettings.C_DutyIn2
    %assign C_OnePulse1 = SFcnParamSettings.C_OnePulse1
    %assign C_OnePulse_Polarity1 = SFcnParamSettings.C_OnePulse_Polarity1
    %assign C_OnePulse_CompVal1 = SFcnParamSettings.C_OnePulse_CompVal1
    %assign C_OnePulse2 = SFcnParamSettings.C_OnePulse2
    %assign C_OnePulse_Polarity2 = SFcnParamSettings.C_OnePulse_Polarity2
    %assign C_OnePulse_CompVal2 = SFcnParamSettings.C_OnePulse_CompVal2
    %assign TIM_IRQ_UPDC = SFcnParamSettings.TIM_IRQ_UPDC
    %assign TIM_IRQ_REPC = SFcnParamSettings.TIM_IRQ_REPC
    %assign TIM_IRQ_COMP1C = SFcnParamSettings.TIM_IRQ_COMP1C
    %assign TIM_IRQ_COMP2C = SFcnParamSettings.TIM_IRQ_COMP2C
    %assign TIM_IRQ_COMP3C = SFcnParamSettings.TIM_IRQ_COMP3C
    %assign TIM_IRQ_COMP4C = SFcnParamSettings.TIM_IRQ_COMP4C
    %assign TIM_IRQ_CAPT1C = SFcnParamSettings.TIM_IRQ_CAPT1C
    %assign TIM_IRQ_CAPT2C = SFcnParamSettings.TIM_IRQ_CAPT2C
    %assign TIM_IRQ_DELC = SFcnParamSettings.TIM_IRQ_DELC
    %assign TIM_IRQ_RESET_CPTC = SFcnParamSettings.TIM_IRQ_RESET_CPTC
    %assign TIM_IRQ_OUT1SC = SFcnParamSettings.TIM_IRQ_OUT1SC
    %assign TIM_IRQ_OUT1RC = SFcnParamSettings.TIM_IRQ_OUT1RC
    %assign TIM_IRQ_OUT2SC = SFcnParamSettings.TIM_IRQ_OUT2SC
    %assign TIM_IRQ_OUT2RC = SFcnParamSettings.TIM_IRQ_OUT2RC
    %assign D_Mode = SFcnParamSettings.D_Mode
    %assign D_DMA = SFcnParamSettings.D_DMA
    %assign D_IT_global = SFcnParamSettings.D_IT_global
    %assign D_Tim_div = SFcnParamSettings.D_Tim_div
    %assign D_Period = SFcnParamSettings.D_Period
    %assign D_PWM_Period = SFcnParamSettings.D_PWM_Period
    %assign D_Capture1 = SFcnParamSettings.D_Capture1
    %assign D_Capture2 = SFcnParamSettings.D_Capture2
    %assign TD1_Enable = SFcnParamSettings.TD1_Enable
    %assign TD1_Polarity = SFcnParamSettings.TD1_Polarity
    %assign TD1_Chopper = SFcnParamSettings.TD1_Chopper
    %assign TD2_Enable = SFcnParamSettings.TD2_Enable
    %assign TD2_Polarity = SFcnParamSettings.TD2_Polarity
    %assign TD2_Chopper = SFcnParamSettings.TD2_Chopper
    %assign D_Unit1 = SFcnParamSettings.D_Unit1
    %assign D_Unit2 = SFcnParamSettings.D_Unit2
    %assign D_Unit3 = SFcnParamSettings.D_Unit3
    %assign D_Unit4 = SFcnParamSettings.D_Unit4
    %assign D_Output_Comp1 = SFcnParamSettings.D_Output_Comp1
    %assign D_Comp_Polarity1 = SFcnParamSettings.D_Comp_Polarity1
    %assign D_CompVal1 = SFcnParamSettings.D_CompVal1
    %assign D_Output_Comp2 = SFcnParamSettings.D_Output_Comp2
    %assign D_Comp_Polarity2 = SFcnParamSettings.D_Comp_Polarity2
    %assign D_CompVal2 = SFcnParamSettings.D_CompVal2
    %assign D_Output_PWM1 = SFcnParamSettings.D_Output_PWM1
    %assign D_Output_Polarity1 = SFcnParamSettings.D_Output_Polarity1
    %assign D_DutyVal1 = SFcnParamSettings.D_DutyVal1
    %assign D_DutyIn1 = SFcnParamSettings.D_DutyIn1
    %assign D_Output_PWM2 = SFcnParamSettings.D_Output_PWM2
    %assign D_Output_Polarity2 = SFcnParamSettings.D_Output_Polarity2
    %assign D_DutyVal2 = SFcnParamSettings.D_DutyVal2
    %assign D_DutyIn2 = SFcnParamSettings.D_DutyIn2
    %assign D_OnePulse1 = SFcnParamSettings.D_OnePulse1
    %assign D_OnePulse_Polarity1 = SFcnParamSettings.D_OnePulse_Polarity1
    %assign D_OnePulse_CompVal1 = SFcnParamSettings.D_OnePulse_CompVal1
    %assign D_OnePulse2 = SFcnParamSettings.D_OnePulse2
    %assign D_OnePulse_Polarity2 = SFcnParamSettings.D_OnePulse_Polarity2
    %assign D_OnePulse_CompVal2 = SFcnParamSettings.D_OnePulse_CompVal2
    %assign TIM_IRQ_UPDD = SFcnParamSettings.TIM_IRQ_UPDD
    %assign TIM_IRQ_REPD = SFcnParamSettings.TIM_IRQ_REPD
    %assign TIM_IRQ_COMP1D = SFcnParamSettings.TIM_IRQ_COMP1D
    %assign TIM_IRQ_COMP2D = SFcnParamSettings.TIM_IRQ_COMP2D
    %assign TIM_IRQ_COMP3D = SFcnParamSettings.TIM_IRQ_COMP3D
    %assign TIM_IRQ_COMP4D = SFcnParamSettings.TIM_IRQ_COMP4D
    %assign TIM_IRQ_CAPT1D = SFcnParamSettings.TIM_IRQ_CAPT1D
    %assign TIM_IRQ_CAPT2D = SFcnParamSettings.TIM_IRQ_CAPT2D
    %assign TIM_IRQ_DELD = SFcnParamSettings.TIM_IRQ_DELD
    %assign TIM_IRQ_RESET_CPTD = SFcnParamSettings.TIM_IRQ_RESET_CPTD
    %assign TIM_IRQ_OUT1SD = SFcnParamSettings.TIM_IRQ_OUT1SD
    %assign TIM_IRQ_OUT1RD = SFcnParamSettings.TIM_IRQ_OUT1RD
    %assign TIM_IRQ_OUT2SD = SFcnParamSettings.TIM_IRQ_OUT2SD
    %assign TIM_IRQ_OUT2RD = SFcnParamSettings.TIM_IRQ_OUT2RD
    %assign E_Mode = SFcnParamSettings.E_Mode
    %assign E_DMA = SFcnParamSettings.E_DMA
    %assign E_IT_global = SFcnParamSettings.E_IT_global
    %assign E_Tim_div = SFcnParamSettings.E_Tim_div
    %assign E_Period = SFcnParamSettings.E_Period
    %assign E_PWM_Period = SFcnParamSettings.E_PWM_Period
    %assign E_Capture1 = SFcnParamSettings.E_Capture1
    %assign E_Capture2 = SFcnParamSettings.E_Capture2
    %assign TE1_Enable = SFcnParamSettings.TE1_Enable
    %assign TE1_Polarity = SFcnParamSettings.TE1_Polarity
    %assign TE1_Chopper = SFcnParamSettings.TE1_Chopper
    %assign TE2_Enable = SFcnParamSettings.TE2_Enable
    %assign TE2_Polarity = SFcnParamSettings.TE2_Polarity
    %assign TE2_Chopper = SFcnParamSettings.TE2_Chopper
    %assign E_Unit1 = SFcnParamSettings.E_Unit1
    %assign E_Unit2 = SFcnParamSettings.E_Unit2
    %assign E_Unit3 = SFcnParamSettings.E_Unit3
    %assign E_Unit4 = SFcnParamSettings.E_Unit4
    %assign E_Output_Comp1 = SFcnParamSettings.E_Output_Comp1
    %assign E_Comp_Polarity1 = SFcnParamSettings.E_Comp_Polarity1
    %assign E_CompVal1 = SFcnParamSettings.E_CompVal1
    %assign E_Output_Comp2 = SFcnParamSettings.E_Output_Comp2
    %assign E_Comp_Polarity2 = SFcnParamSettings.E_Comp_Polarity2
    %assign E_CompVal2 = SFcnParamSettings.E_CompVal2
    %assign E_Output_PWM1 = SFcnParamSettings.E_Output_PWM1
    %assign E_Output_Polarity1 = SFcnParamSettings.E_Output_Polarity1
    %assign E_DutyVal1 = SFcnParamSettings.E_DutyVal1
    %assign E_DutyIn1 = SFcnParamSettings.E_DutyIn1
    %assign E_Output_PWM2 = SFcnParamSettings.E_Output_PWM2
    %assign E_Output_Polarity2 = SFcnParamSettings.E_Output_Polarity2
    %assign E_DutyVal2 = SFcnParamSettings.E_DutyVal2
    %assign E_DutyIn2 = SFcnParamSettings.E_DutyIn2
    %assign E_OnePulse1 = SFcnParamSettings.E_OnePulse1
    %assign E_OnePulse_Polarity1 = SFcnParamSettings.E_OnePulse_Polarity1
    %assign E_OnePulse_CompVal1 = SFcnParamSettings.E_OnePulse_CompVal1
    %assign E_OnePulse2 = SFcnParamSettings.E_OnePulse2
    %assign E_OnePulse_Polarity2 = SFcnParamSettings.E_OnePulse_Polarity2
    %assign E_OnePulse_CompVal2 = SFcnParamSettings.E_OnePulse_CompVal2
    %assign TIM_IRQ_UPDE = SFcnParamSettings.TIM_IRQ_UPDE
    %assign TIM_IRQ_REPE = SFcnParamSettings.TIM_IRQ_REPE
    %assign TIM_IRQ_COMP1E = SFcnParamSettings.TIM_IRQ_COMP1E
    %assign TIM_IRQ_COMP2E = SFcnParamSettings.TIM_IRQ_COMP2E
    %assign TIM_IRQ_COMP3E = SFcnParamSettings.TIM_IRQ_COMP3E
    %assign TIM_IRQ_COMP4E = SFcnParamSettings.TIM_IRQ_COMP4E
    %assign TIM_IRQ_CAPT1E = SFcnParamSettings.TIM_IRQ_CAPT1E
    %assign TIM_IRQ_CAPT2E = SFcnParamSettings.TIM_IRQ_CAPT2E
    %assign TIM_IRQ_DELE = SFcnParamSettings.TIM_IRQ_DELE
    %assign TIM_IRQ_RESET_CPTE = SFcnParamSettings.TIM_IRQ_RESET_CPTE
    %assign TIM_IRQ_OUT1SE = SFcnParamSettings.TIM_IRQ_OUT1SE
    %assign TIM_IRQ_OUT1RE = SFcnParamSettings.TIM_IRQ_OUT1RE
    %assign TIM_IRQ_OUT2SE = SFcnParamSettings.TIM_IRQ_OUT2SE
    %assign TIM_IRQ_OUT2RE = SFcnParamSettings.TIM_IRQ_OUT2RE
    %assign F_Mode = SFcnParamSettings.F_Mode
    %assign F_DMA = SFcnParamSettings.F_DMA
    %assign F_IT_global = SFcnParamSettings.F_IT_global
    %assign F_Tim_div = SFcnParamSettings.F_Tim_div
    %assign F_Period = SFcnParamSettings.F_Period
    %assign F_PWM_Period = SFcnParamSettings.F_PWM_Period
    %assign F_Capture1 = SFcnParamSettings.F_Capture1
    %assign F_Capture2 = SFcnParamSettings.F_Capture2
    %assign TF1_Enable = SFcnParamSettings.TF1_Enable
    %assign TF1_Polarity = SFcnParamSettings.TF1_Polarity
    %assign TF1_Chopper = SFcnParamSettings.TF1_Chopper
    %assign TF2_Enable = SFcnParamSettings.TF2_Enable
    %assign TF2_Polarity = SFcnParamSettings.TF2_Polarity
    %assign TF2_Chopper = SFcnParamSettings.TF2_Chopper
    %assign F_Unit1 = SFcnParamSettings.F_Unit1
    %assign F_Unit2 = SFcnParamSettings.F_Unit2
    %assign F_Unit3 = SFcnParamSettings.F_Unit3
    %assign F_Unit4 = SFcnParamSettings.F_Unit4
    %assign F_Output_Comp1 = SFcnParamSettings.F_Output_Comp1
    %assign F_Comp_Polarity1 = SFcnParamSettings.F_Comp_Polarity1
    %assign F_CompVal1 = SFcnParamSettings.F_CompVal1
    %assign F_Output_Comp2 = SFcnParamSettings.F_Output_Comp2
    %assign F_Comp_Polarity2 = SFcnParamSettings.F_Comp_Polarity2
    %assign F_CompVal2 = SFcnParamSettings.F_CompVal2
    %assign F_Output_PWM1 = SFcnParamSettings.F_Output_PWM1
    %assign F_Output_Polarity1 = SFcnParamSettings.F_Output_Polarity1
    %assign F_DutyVal1 = SFcnParamSettings.F_DutyVal1
    %assign F_DutyIn1 = SFcnParamSettings.F_DutyIn1
    %assign F_Output_PWM2 = SFcnParamSettings.F_Output_PWM2
    %assign F_Output_Polarity2 = SFcnParamSettings.F_Output_Polarity2
    %assign F_DutyVal2 = SFcnParamSettings.F_DutyVal2
    %assign F_DutyIn2 = SFcnParamSettings.F_DutyIn2
    %assign F_OnePulse1 = SFcnParamSettings.F_OnePulse1
    %assign F_OnePulse_Polarity1 = SFcnParamSettings.F_OnePulse_Polarity1
    %assign F_OnePulse_CompVal1 = SFcnParamSettings.F_OnePulse_CompVal1
    %assign F_OnePulse2 = SFcnParamSettings.F_OnePulse2
    %assign F_OnePulse_Polarity2 = SFcnParamSettings.F_OnePulse_Polarity2
    %assign F_OnePulse_CompVal2 = SFcnParamSettings.F_OnePulse_CompVal2
    %assign TIM_IRQ_UPDF = SFcnParamSettings.TIM_IRQ_UPDF
    %assign TIM_IRQ_REPF = SFcnParamSettings.TIM_IRQ_REPF
    %assign TIM_IRQ_COMP1F = SFcnParamSettings.TIM_IRQ_COMP1F
    %assign TIM_IRQ_COMP2F = SFcnParamSettings.TIM_IRQ_COMP2F
    %assign TIM_IRQ_COMP3F = SFcnParamSettings.TIM_IRQ_COMP3F
    %assign TIM_IRQ_COMP4F = SFcnParamSettings.TIM_IRQ_COMP4F
    %assign TIM_IRQ_CAPT1F = SFcnParamSettings.TIM_IRQ_CAPT1F
    %assign TIM_IRQ_CAPT2F = SFcnParamSettings.TIM_IRQ_CAPT2F
    %assign TIM_IRQ_DELF = SFcnParamSettings.TIM_IRQ_DELF
    %assign TIM_IRQ_RESET_CPTF = SFcnParamSettings.TIM_IRQ_RESET_CPTF
    %assign TIM_IRQ_OUT1SF = SFcnParamSettings.TIM_IRQ_OUT1SF
    %assign TIM_IRQ_OUT1RF = SFcnParamSettings.TIM_IRQ_OUT1RF
    %assign TIM_IRQ_OUT2SF = SFcnParamSettings.TIM_IRQ_OUT2SF
    %assign TIM_IRQ_OUT2RF = SFcnParamSettings.TIM_IRQ_OUT2RF

    %assign M_Used = SFcnParamSettings.M_Used
    %assign A_Used = SFcnParamSettings.A_Used
    %assign B_Used = SFcnParamSettings.B_Used
    %assign C_Used = SFcnParamSettings.C_Used
    %assign D_Used = SFcnParamSettings.D_Used
    %assign E_Used = SFcnParamSettings.E_Used
    %assign F_Used = SFcnParamSettings.F_Used

    %% Code for required TIM external definition: in model_HRTIM.c file
    %assign timNum = IDNUM("%<HRTIM_Name>")[1]

        %%Initialization should be done once only
        %if EXISTS(::InsertHRTIM) && (::InsertHRTIM == TLC_TRUE)
            %assign ::InsertHRTIM    = TLC_FALSE

        %openfile HRTIM_Buf
            /* %<HRTIM_Name> handler */
            extern HRTIM_HandleTypeDef hhrtim%<timNum>;
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelH_HRTIM,"Defines",HRTIM_Buf)>

        %openfile HRTIM_Buf
        /* %<HRTIM_Name> data information*/
        HRTIM_DataLinkTypeDef   %<HRTIM_Name>_DataLink;
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelC_HRTIM,"Defines",HRTIM_Buf)>

            %openfile HRTIM_Buf
            /**
            * @brief  HRTIM data information
            */
            typedef struct  {
             /* HRTimer Clock */
             uint32_t HRTIM_Clock;
        %if (ISEQUAL(M_Used,"on"))
             /* Master Timer */
             uint32_t M_PWM_Period;
             uint32_t M_Unit1;
             uint32_t M_Unit2;
             uint32_t M_Unit3;
             uint32_t M_Unit4;
        %endif
        %if (ISEQUAL(A_Used,"on") && ISEQUAL(A_Mode,"Virtual")==TLC_FALSE)
             /* Timer A */
             uint32_t A_PWM_Period;
        %if (ISEQUAL(A_Mode,"Advanced"))
             uint32_t A_Unit1;
             uint32_t A_Unit2;
             uint32_t A_Unit3;
             uint32_t A_Unit4;
        %endif
        %if (ISEQUAL(A_Mode,"Basic"))
             uint32_t A_CompVal1;
             uint32_t A_CompVal2;
             uint32_t A_DutyVal1;
             uint32_t A_DutyVal2;
             uint32_t A_OnePulse_CompVal1;
             uint32_t A_OnePulse_CompVal2;
        %endif
             uint32_t A_ICVal1;
             uint32_t A_ICVal2;
        %endif
        %if (ISEQUAL(B_Used,"on") && ISEQUAL(B_Mode,"Virtual")==TLC_FALSE)
             /* Timer B */
             uint32_t B_PWM_Period;
        %if (ISEQUAL(B_Mode,"Advanced"))
             uint32_t B_Unit1;
             uint32_t B_Unit2;
             uint32_t B_Unit3;
             uint32_t B_Unit4;
        %endif
        %if (ISEQUAL(B_Mode,"Basic"))
             uint32_t B_CompVal1;
             uint32_t B_CompVal2;
             uint32_t B_DutyVal1;
             uint32_t B_DutyVal2;
             uint32_t B_OnePulse_CompVal1;
             uint32_t B_OnePulse_CompVal2;
        %endif
             uint32_t B_ICVal1;
             uint32_t B_ICVal2;
        %endif
        %if (ISEQUAL(C_Used,"on") && ISEQUAL(C_Mode,"Virtual")==TLC_FALSE)
             /* Timer C */
             uint32_t C_PWM_Period;
        %if (ISEQUAL(C_Mode,"Advanced"))
             uint32_t C_Unit1;
             uint32_t C_Unit2;
             uint32_t C_Unit3;
             uint32_t C_Unit4;
        %endif
        %if (ISEQUAL(C_Mode,"Basic"))
             uint32_t C_CompVal1;
             uint32_t C_CompVal2;
             uint32_t C_DutyVal1;
             uint32_t C_DutyVal2;
             uint32_t C_OnePulse_CompVal1;
             uint32_t C_OnePulse_CompVal2;
        %endif
             uint32_t C_ICVal1;
             uint32_t C_ICVal2;
        %endif
        %if (ISEQUAL(D_Used,"on") && ISEQUAL(D_Mode,"Virtual")==TLC_FALSE)
             /* Timer D */
             uint32_t D_PWM_Period;
        %if (ISEQUAL(D_Mode,"Advanced"))
             uint32_t D_Unit1;
             uint32_t D_Unit2;
             uint32_t D_Unit3;
             uint32_t D_Unit4;
        %endif
        %if (ISEQUAL(D_Mode,"Basic"))
             uint32_t D_CompVal1;
             uint32_t D_CompVal2;
             uint32_t D_DutyVal1;
             uint32_t D_DutyVal2;
             uint32_t D_OnePulse_CompVal1;
             uint32_t D_OnePulse_CompVal2;
        %endif
             uint32_t D_ICVal1;
             uint32_t D_ICVal2;
        %endif
        %if (ISEQUAL(E_Used,"on") && ISEQUAL(E_Mode,"Virtual")==TLC_FALSE)
             /* Timer E */
             uint32_t E_PWM_Period;
        %if (ISEQUAL(E_Mode,"Advanced"))
             uint32_t E_Unit1;
             uint32_t E_Unit2;
             uint32_t E_Unit3;
             uint32_t E_Unit4;
        %endif
        %if (ISEQUAL(E_Mode,"Basic"))
             uint32_t E_CompVal1;
             uint32_t E_CompVal2;
             uint32_t E_DutyVal1;
             uint32_t E_DutyVal2;
             uint32_t E_OnePulse_CompVal1;
             uint32_t E_OnePulse_CompVal2;
        %endif
             uint32_t E_ICVal1;
             uint32_t E_ICVal2;
        %endif
        %if (ISEQUAL(F_Used,"on") && ISEQUAL(F_Mode,"Virtual")==TLC_FALSE)
             /* Timer F */
             uint32_t F_PWM_Period;
        %if (ISEQUAL(F_Mode,"Advanced"))
             uint32_t F_Unit1;
             uint32_t F_Unit2;
             uint32_t F_Unit3;
             uint32_t F_Unit4;
        %endif
        %if (ISEQUAL(F_Mode,"Basic"))
             uint32_t F_CompVal1;
             uint32_t F_CompVal2;
             uint32_t F_DutyVal1;
             uint32_t F_DutyVal2;
             uint32_t F_OnePulse_CompVal1;
             uint32_t F_OnePulse_CompVal2;
        %endif
             uint32_t F_ICVal1;
             uint32_t F_ICVal2;
        %endif
            }HRTIM_DataLinkTypeDef;
            %closefile HRTIM_Buf
            %<LibSetSourceFileSection(modelH_HRTIM,"Defines",HRTIM_Buf)>

            %openfile HRTIM_Buf
            %if (%<NbHRTim> > 1)
            uint16_t               G_NbHRTimConf = 0; /* Number of configured HRTIMER*/
            /* Array of TIMER data information */
            HRTIM_DataLinkTypeDef*   G_HRTIM_Data[%<NbHRTim>];
            HRTIM_HandleTypeDef*     G_HRTIM_Handler[%<NbHRTim>];
            %else
            HRTIM_DataLinkTypeDef*   G_HRTIM_Data;      /* Pointer to HRTIMER data information*/
            HRTIM_HandleTypeDef*     G_HRTIM_Handler;   /* Pointer to HRTIMER handler */
            %endif
            %closefile HRTIM_Buf
            %<LibSetSourceFileSection(modelC_HRTIM,"Defines",HRTIM_Buf)>

        %openfile HRTIM_Buf
        /* %<HRTIM_Name> data information*/
        extern HRTIM_DataLinkTypeDef   %<HRTIM_Name>_DataLink;
        /* %<HRTIM_Name>_Initialization prototyping */
        void %<HRTIM_Name>_Initialization(void);
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelH_HRTIM,"Defines",HRTIM_Buf)>

        %openfile HRTIM_Buf
        /*******************************************************************************
        * Function Name  : %<HRTIM_Name>_Initialization
        * Description    : Initialization of %<HRTIM_Name>
        * Input          : -
        *******************************************************************************/
        void %<HRTIM_Name>_Initialization(void)
        {
            /*Store HRTimer frequency */
            %<HRTIM_Name>_DataLink.HRTIM_Clock = %<HRTIM_Clock>;
        %if (ISEQUAL(M_Used,"on"))
            /*Store Master Timer information */
            %<HRTIM_Name>_DataLink.M_PWM_Period = %<M_PWM_Period>;
            %<HRTIM_Name>_DataLink.M_Unit1 = %<M_Unit1>;
            %<HRTIM_Name>_DataLink.M_Unit2 = %<M_Unit2>;
            %<HRTIM_Name>_DataLink.M_Unit3 = %<M_Unit3>;
            %<HRTIM_Name>_DataLink.M_Unit4 = %<M_Unit4>;
        %endif
        %if (ISEQUAL(A_Used,"on") && ISEQUAL(A_Mode,"Virtual")==TLC_FALSE)
            /*Store Timer A information */
            %<HRTIM_Name>_DataLink.A_PWM_Period = %<A_PWM_Period>;
        %if (ISEQUAL(A_Mode,"Advanced"))
            %<HRTIM_Name>_DataLink.A_Unit1 = %<A_Unit1>;
            %<HRTIM_Name>_DataLink.A_Unit2 = %<A_Unit2>;
            %<HRTIM_Name>_DataLink.A_Unit3 = %<A_Unit3>;
            %<HRTIM_Name>_DataLink.A_Unit4 = %<A_Unit4>;
        %endif
        %if (ISEQUAL(A_Mode,"Basic"))
            %<HRTIM_Name>_DataLink.A_CompVal1 = %<A_CompVal1>;
            %<HRTIM_Name>_DataLink.A_CompVal2 = %<A_CompVal2>;
            %<HRTIM_Name>_DataLink.A_DutyVal1 = %<A_DutyVal1>;
            %<HRTIM_Name>_DataLink.A_DutyVal2 = %<A_DutyVal2>;
            %<HRTIM_Name>_DataLink.A_OnePulse_CompVal1 = %<A_OnePulse_CompVal1>;
            %<HRTIM_Name>_DataLink.A_OnePulse_CompVal2 = %<A_OnePulse_CompVal2>;
        %endif
            %<HRTIM_Name>_DataLink.A_ICVal1 = 0;
            %<HRTIM_Name>_DataLink.A_ICVal2 = 0;
        %endif
        %if (ISEQUAL(B_Used,"on") && ISEQUAL(B_Mode,"Virtual")==TLC_FALSE)
            /*Store Timer B information */
            %<HRTIM_Name>_DataLink.B_PWM_Period = %<B_PWM_Period>;
        %if (ISEQUAL(B_Mode,"Advanced"))
            %<HRTIM_Name>_DataLink.B_Unit1 = %<B_Unit1>;
            %<HRTIM_Name>_DataLink.B_Unit2 = %<B_Unit2>;
            %<HRTIM_Name>_DataLink.B_Unit3 = %<B_Unit3>;
            %<HRTIM_Name>_DataLink.B_Unit4 = %<B_Unit4>;
        %endif
        %if (ISEQUAL(B_Mode,"Basic"))
            %<HRTIM_Name>_DataLink.B_CompVal1 = %<B_CompVal1>;
            %<HRTIM_Name>_DataLink.B_CompVal2 = %<B_CompVal2>;
            %<HRTIM_Name>_DataLink.B_DutyVal1 = %<B_DutyVal1>;
            %<HRTIM_Name>_DataLink.B_DutyVal2 = %<B_DutyVal2>;
            %<HRTIM_Name>_DataLink.B_OnePulse_CompVal1 = %<B_OnePulse_CompVal1>;
            %<HRTIM_Name>_DataLink.B_OnePulse_CompVal2 = %<B_OnePulse_CompVal2>;
        %endif
            %<HRTIM_Name>_DataLink.B_ICVal1 = 0;
            %<HRTIM_Name>_DataLink.B_ICVal2 = 0;
        %endif
        %if (ISEQUAL(C_Used,"on") && ISEQUAL(C_Mode,"Virtual")==TLC_FALSE)
            /*Store Timer C information */
            %<HRTIM_Name>_DataLink.C_PWM_Period = %<C_PWM_Period>;
        %if (ISEQUAL(C_Mode,"Advanced"))
            %<HRTIM_Name>_DataLink.C_Unit1 = %<C_Unit1>;
            %<HRTIM_Name>_DataLink.C_Unit2 = %<C_Unit2>;
            %<HRTIM_Name>_DataLink.C_Unit3 = %<C_Unit3>;
            %<HRTIM_Name>_DataLink.C_Unit4 = %<C_Unit4>;
        %endif
        %if (ISEQUAL(C_Mode,"Basic"))
            %<HRTIM_Name>_DataLink.C_CompVal1 = %<C_CompVal1>;
            %<HRTIM_Name>_DataLink.C_CompVal2 = %<C_CompVal2>;
            %<HRTIM_Name>_DataLink.C_DutyVal1 = %<C_DutyVal1>;
            %<HRTIM_Name>_DataLink.C_DutyVal2 = %<C_DutyVal2>;
            %<HRTIM_Name>_DataLink.C_OnePulse_CompVal1 = %<C_OnePulse_CompVal1>;
            %<HRTIM_Name>_DataLink.C_OnePulse_CompVal2 = %<C_OnePulse_CompVal2>;
        %endif
            %<HRTIM_Name>_DataLink.C_ICVal1 = 0;
            %<HRTIM_Name>_DataLink.C_ICVal2 = 0;
        %endif
        %if (ISEQUAL(D_Used,"on") && ISEQUAL(D_Mode,"Virtual")==TLC_FALSE)
            /*Store Timer D information */
            %<HRTIM_Name>_DataLink.D_PWM_Period = %<D_PWM_Period>;
        %if (ISEQUAL(D_Mode,"Advanced"))
            %<HRTIM_Name>_DataLink.D_Unit1 = %<D_Unit1>;
            %<HRTIM_Name>_DataLink.D_Unit2 = %<D_Unit2>;
            %<HRTIM_Name>_DataLink.D_Unit3 = %<D_Unit3>;
            %<HRTIM_Name>_DataLink.D_Unit4 = %<D_Unit4>;
        %endif
        %if (ISEQUAL(D_Mode,"Basic"))
            %<HRTIM_Name>_DataLink.D_CompVal1 = %<D_CompVal1>;
            %<HRTIM_Name>_DataLink.D_CompVal2 = %<D_CompVal2>;
            %<HRTIM_Name>_DataLink.D_DutyVal1 = %<D_DutyVal1>;
            %<HRTIM_Name>_DataLink.D_DutyVal2 = %<D_DutyVal2>;
            %<HRTIM_Name>_DataLink.D_OnePulse_CompVal1 = %<D_OnePulse_CompVal1>;
            %<HRTIM_Name>_DataLink.D_OnePulse_CompVal2 = %<D_OnePulse_CompVal2>;
        %endif
            %<HRTIM_Name>_DataLink.D_ICVal1 = 0;
            %<HRTIM_Name>_DataLink.D_ICVal2 = 0;
        %endif
        %if (ISEQUAL(E_Used,"on") && ISEQUAL(E_Mode,"Virtual")==TLC_FALSE)
            /*Store Timer E information */
            %<HRTIM_Name>_DataLink.E_PWM_Period = %<E_PWM_Period>;
        %if (ISEQUAL(E_Mode,"Advanced"))
            %<HRTIM_Name>_DataLink.E_Unit1 = %<E_Unit1>;
            %<HRTIM_Name>_DataLink.E_Unit2 = %<E_Unit2>;
            %<HRTIM_Name>_DataLink.E_Unit3 = %<E_Unit3>;
            %<HRTIM_Name>_DataLink.E_Unit4 = %<E_Unit4>;
        %endif
        %if (ISEQUAL(E_Mode,"Basic"))
            %<HRTIM_Name>_DataLink.E_CompVal1 = %<E_CompVal1>;
            %<HRTIM_Name>_DataLink.E_CompVal2 = %<E_CompVal2>;
            %<HRTIM_Name>_DataLink.E_DutyVal1 = %<E_DutyVal1>;
            %<HRTIM_Name>_DataLink.E_DutyVal2 = %<E_DutyVal2>;
            %<HRTIM_Name>_DataLink.E_OnePulse_CompVal1 = %<E_OnePulse_CompVal1>;
            %<HRTIM_Name>_DataLink.E_OnePulse_CompVal2 = %<E_OnePulse_CompVal2>;
        %endif
            %<HRTIM_Name>_DataLink.E_ICVal1 = 0;
            %<HRTIM_Name>_DataLink.E_ICVal2 = 0;
        %endif
        %if (ISEQUAL(F_Used,"on") && ISEQUAL(F_Mode,"Virtual")==TLC_FALSE)
            /*Store Timer F information */
            %<HRTIM_Name>_DataLink.F_PWM_Period = %<F_PWM_Period>;
        %if (ISEQUAL(F_Mode,"Advanced"))
            %<HRTIM_Name>_DataLink.F_Unit1 = %<F_Unit1>;
            %<HRTIM_Name>_DataLink.F_Unit2 = %<F_Unit2>;
            %<HRTIM_Name>_DataLink.F_Unit3 = %<F_Unit3>;
            %<HRTIM_Name>_DataLink.F_Unit4 = %<F_Unit4>;
        %endif
        %if (ISEQUAL(F_Mode,"Basic"))
            %<HRTIM_Name>_DataLink.F_CompVal1 = %<F_CompVal1>;
            %<HRTIM_Name>_DataLink.F_CompVal2 = %<F_CompVal2>;
            %<HRTIM_Name>_DataLink.F_DutyVal1 = %<F_DutyVal1>;
            %<HRTIM_Name>_DataLink.F_DutyVal2 = %<F_DutyVal2>;
            %<HRTIM_Name>_DataLink.F_OnePulse_CompVal1 = %<F_OnePulse_CompVal1>;
            %<HRTIM_Name>_DataLink.F_OnePulse_CompVal2 = %<F_OnePulse_CompVal2>;
        %endif
            %<HRTIM_Name>_DataLink.F_ICVal1 = 0;
            %<HRTIM_Name>_DataLink.F_ICVal2 = 0;
        %endif
        %%%%%%%%%%%%%%%%  MASTER TIMER  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(M_Used,"on"))
            /*Set Master compare registers */
            %if (%<M_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, (uint32_t)(%<M_Unit1>));
            %endif
            %if (%<M_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_2, (uint32_t)(%<M_Unit2>));
            %endif
            %if (%<M_Unit3> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_3, (uint32_t)(%<M_Unit3>));
            %endif
            %if (%<M_Unit4> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_4, (uint32_t)(%<M_Unit4>));
            %endif
            /* Start Master Timer counter*/
            %if(ISEQUAL(M_DMA, "on"))
                HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_MASTER,%<HRTIM_Name>_DataLink.M_PWM_Period, (&hhrtim%<timNum>)->Instance->sMasterRegs.MPER, 1);
            %elseif(ISEQUAL(M_IT_global, "on"))
                HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_MASTER);
            %else
                HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_MASTER);
            %endif
        %endif
        %%%%%%%%%%%%%%%%  CAPTURE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if(ISEQUAL(A_Capture1, "on"))
                /* Start Input Capture signal TA1 */
            %if(ISEQUAL(A_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_CAPTUREUNIT_1, &hhrtim%<timNum>->sTimerxRegs[0].CPT1xR,&%<HRTIM_Name>_DataLink.A_ICVal1, 1);
            %elseif(ISEQUAL(A_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_CAPTUREUNIT_1);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_CAPTUREUNIT_1);
            %endif
        %endif
        %if(ISEQUAL(A_Capture2, "on"))
                /* Start Input Capture signal TA2 */
            %if(ISEQUAL(A_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_CAPTUREUNIT_2, &hhrtim%<timNum>->sTimerxRegs[0].CPT2xR,&%<HRTIM_Name>_DataLink.A_ICVal2, 1);
            %elseif(ISEQUAL(A_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_CAPTUREUNIT_2);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_CAPTUREUNIT_2);
            %endif
        %endif
        %if(ISEQUAL(B_Capture1, "on"))
                /* Start Input Capture signal TB1 */
            %if(ISEQUAL(B_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_CAPTUREUNIT_1, &hhrtim%<timNum>->sTimerxRegs[1].CPT1xR,&%<HRTIM_Name>_DataLink.B_ICVal1, 1);
            %elseif(ISEQUAL(B_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_CAPTUREUNIT_1);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_CAPTUREUNIT_1);
            %endif
        %endif
        %if(ISEQUAL(B_Capture2, "on"))
                /* Start Input Capture signal TB2 */
            %if(ISEQUAL(B_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_CAPTUREUNIT_2, &hhrtim%<timNum>->sTimerxRegs[1].CPT2xR,&%<HRTIM_Name>_DataLink.B_ICVal2, 1);
            %elseif(ISEQUAL(B_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_CAPTUREUNIT_2);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_CAPTUREUNIT_2);
            %endif
        %endif
        %if(ISEQUAL(C_Capture1, "on"))
                /* Start Input Capture signal TC1 */
            %if(ISEQUAL(C_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_CAPTUREUNIT_1, &hhrtim%<timNum>->sTimerxRegs[2].CPT1xR,&%<HRTIM_Name>_DataLink.C_ICVal1, 1);
            %elseif(ISEQUAL(C_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_CAPTUREUNIT_1);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_CAPTUREUNIT_1);
            %endif
        %endif
        %if(ISEQUAL(C_Capture2, "on"))
                /* Start Input Capture signal TC2 */
            %if(ISEQUAL(C_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_CAPTUREUNIT_2, &hhrtim%<timNum>->sTimerxRegs[2].CPT2xR,&%<HRTIM_Name>_DataLink.C_ICVal2, 1);
            %elseif(ISEQUAL(C_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_CAPTUREUNIT_2);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_CAPTUREUNIT_2);
            %endif
        %endif
        %if(ISEQUAL(D_Capture1, "on"))
                /* Start Input Capture signal TD1 */
            %if(ISEQUAL(D_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_CAPTUREUNIT_1, &hhrtim%<timNum>->sTimerxRegs[3].CPT1xR,&%<HRTIM_Name>_DataLink.D_ICVal1, 1);
            %elseif(ISEQUAL(D_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_CAPTUREUNIT_1);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_CAPTUREUNIT_1);
            %endif
        %endif
        %if(ISEQUAL(D_Capture2, "on"))
                /* Start Input Capture signal TD2 */
            %if(ISEQUAL(D_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_CAPTUREUNIT_2, &hhrtim%<timNum>->sTimerxRegs[3].CPT2xR,&%<HRTIM_Name>_DataLink.D_ICVal2, 1);
            %elseif(ISEQUAL(D_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_CAPTUREUNIT_2);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_CAPTUREUNIT_2);
            %endif
        %endif
        %if(ISEQUAL(E_Capture1, "on"))
                /* Start Input Capture signal TE1 */
            %if(ISEQUAL(E_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_1, &hhrtim%<timNum>->sTimerxRegs[4].CPT1xR,&%<HRTIM_Name>_DataLink.E_ICVal1, 1);
            %elseif(ISEQUAL(E_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_1);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_1);
            %endif
        %endif
        %if(ISEQUAL(E_Capture2, "on"))
                /* Start Input Capture signal TE2 */
            %if(ISEQUAL(E_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_2, &hhrtim%<timNum>->sTimerxRegs[4].CPT2xR,&%<HRTIM_Name>_DataLink.E_ICVal2, 1);
            %elseif(ISEQUAL(E_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_2);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_2);
            %endif
        %endif
        %if(ISEQUAL(F_Capture1, "on"))
                /* Start Input Capture signal TE1 */
            %if(ISEQUAL(F_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_1, &hhrtim%<timNum>->sTimerxRegs[4].CPT1xR,&%<HRTIM_Name>_DataLink.F_ICVal1, 1);
            %elseif(ISEQUAL(F_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_1);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_1);
            %endif
        %endif
        %if(ISEQUAL(F_Capture2, "on"))
                /* Start Input Capture signal TE2 */
            %if(ISEQUAL(F_DMA, "on"))
                HAL_HRTIM_SimpleCaptureStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_2, &hhrtim%<timNum>->sTimerxRegs[4].CPT2xR,&%<HRTIM_Name>_DataLink.F_ICVal2, 1);
            %elseif(ISEQUAL(F_IT_global, "on"))
                HAL_HRTIM_SimpleCaptureStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_2);
            %else
                HAL_HRTIM_SimpleCaptureStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_CAPTUREUNIT_2);
            %endif
        %endif
        %%%%%%%%%%%%%%%%  TIMER A  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(A_Used,"on"))
            /*Set Timer A compare registers */
            %if ( %<A_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, (uint32_t)(%<A_Unit1>));
            %endif
            %if ( %<A_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, (uint32_t)(%<A_Unit2>));
            %endif
            %if ( %<A_Unit3> != 0 )
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, (uint32_t)(%<A_Unit3>));
            %endif
            %if (%<A_Unit4> != 0 )
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_4, (uint32_t)(%<A_Unit4>));
            %endif
            %if (ISEQUAL(A_Mode,"Basic"))
                    /* Start TimerA counter*/
                %if(ISEQUAL(A_DMA, "on"))
                    HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,%<HRTIM_Name>_DataLink.A_PWM_Period, (&hhrtim%<timNum>)->Instance->sTimerxRegs[0].PERxR, 1);
                %elseif(ISEQUAL(A_IT_global, "on"))
                    HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A);
                %else
                    HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A);
                %endif
                %if(ISEQUAL(A_Output_Comp1, "on"))
                        /* Start Output compare TA1 */
                    %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1,&%<HRTIM_Name>_DataLink.A_CompVal1, &hhrtim%<timNum>->sTimerxRegs[0].CMP1xR, 1);
                    %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1);
                    %endif
                %endif
                %if(ISEQUAL(A_Output_Comp2, "on"))
                        /* Start Output compare TA2 */
                    %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2,&%<HRTIM_Name>_DataLink.A_CompVal2, &hhrtim%<timNum>->sTimerxRegs[0].CMP2xR, 1);
                    %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2);
                    %endif
                %endif
                %if(ISEQUAL(A_Output_PWM1, "on"))
                        /* Start PWM output signal TA1 */
                    %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1,&%<HRTIM_Name>_DataLink.A_DutyVal1, &hhrtim%<timNum>->sTimerxRegs[0].CMP1xR, 1);
                    %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1);
                    %endif
                %endif
                %if(ISEQUAL(A_Output_PWM2, "on"))
                        /* Start PWM output signal TA2 */
                    %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2,&%<HRTIM_Name>_DataLink.A_DutyVal2, &hhrtim%<timNum>->sTimerxRegs[0].CMP2xR, 1);
                    %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2);
                    %endif
                %endif
                %if(ISEQUAL(A_OnePulse1, "on"))
                        /* Start One Pulse output signal TA1 */
                    %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1,&%<HRTIM_Name>_DataLink.A_OnePulse_CompVal1, &hhrtim%<timNum>->sTimerxRegs[0].CMP1xR, 1);
                    %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA1);
                    %endif
                %endif
                %if(ISEQUAL(A_OnePulse2, "on"))
                        /* Start One Pulse output signal TA2 */
                    %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2,&%<HRTIM_Name>_DataLink.A_OnePulse_CompVal2, &hhrtim%<timNum>->sTimerxRegs[0].CMP2xR, 1);
                    %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_A,HRTIM_OUTPUT_TA2);
                    %endif
                %endif
            %else
                       /* Start PWM output counter */
                %if(ISEQUAL(A_DMA, "on"))
                        HAL_HRTIM_WaveformCountStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERID_TIMER_A);
                %elseif(ISEQUAL(A_IT_global, "on"))
                        HAL_HRTIM_WaveformCountStart_IT(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_A);
                %else
                        HAL_HRTIM_WaveformCountStart(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_A);
                %endif
                %if(ISEQUAL(TA1_Enable, "on"))
                        /* Start PWM output signal TA1 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TA1);
                %endif
                %if(ISEQUAL(TA2_Enable, "on"))
                        /* Start PWM output signal TA2 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TA2);
                %endif
            %endif
        %endif
        %%%%%%%%%%%%%%%%  TIMER B  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(B_Used,"on"))
            %if (ISEQUAL(B_Mode,"Virtual") == TLC_FALSE)
            /*Set Timer B compare registers */
            %if ( %<B_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, (uint32_t)(%<B_Unit1>));
            %endif
            %if ( %<B_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, (uint32_t)(%<B_Unit2>));
            %endif
            %if ( %<B_Unit3> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, (uint32_t)(%<B_Unit3>));
            %endif
            %if ( %<B_Unit4> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_4, (uint32_t)(%<B_Unit4>));
            %endif
            %endif
            %if (ISEQUAL(B_Mode,"Basic"))
                    /* Start TimerB counter*/
                %if(ISEQUAL(B_DMA, "on"))
                    HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,%<HRTIM_Name>_DataLink.B_PWM_Period, (&hhrtim%<timNum>)->Instance->sTimerxRegs[1].PERxR, 1);
                %elseif(ISEQUAL(B_IT_global, "on"))
                    HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B);
                %else
                    HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B);
                %endif
                %if(ISEQUAL(B_Output_Comp1, "on"))
                        /* Start Output compare TB1 */
                    %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1,&%<HRTIM_Name>_DataLink.B_CompVal1, &hhrtim%<timNum>->sTimerxRegs[1].CMP1xR, 1);
                    %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1);
                    %endif
                %endif
                %if(ISEQUAL(B_Output_Comp2, "on"))
                        /* Start Output compare TB2 */
                    %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2,&%<HRTIM_Name>_DataLink.B_CompVal2, &hhrtim%<timNum>->sTimerxRegs[1].CMP2xR, 1);
                    %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2);
                    %endif
                %endif
                %if(ISEQUAL(B_Output_PWM1, "on"))
                        /* Start PWM output signal TB1 */
                    %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1,&%<HRTIM_Name>_DataLink.B_DutyVal1, &hhrtim%<timNum>->sTimerxRegs[1].CMP1xR, 1);
                    %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1);
                    %endif
                %endif
                %if(ISEQUAL(B_Output_PWM2, "on"))
                        /* Start PWM output signal TB2 */
                    %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2,&%<HRTIM_Name>_DataLink.B_DutyVal2, &hhrtim%<timNum>->sTimerxRegs[1].CMP2xR, 1);
                    %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2);
                    %endif
                %endif
                %if(ISEQUAL(B_OnePulse1, "on"))
                        /* Start One Pulse output signal TB1 */
                    %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1,&%<HRTIM_Name>_DataLink.B_OnePulse_CompVal1, &hhrtim%<timNum>->sTimerxRegs[1].CMP1xR, 1);
                    %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB1);
                    %endif
                %endif
                %if(ISEQUAL(B_OnePulse2, "on"))
                        /* Start One Pulse output signal TB2 */
                    %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2,&%<HRTIM_Name>_DataLink.B_OnePulse_CompVal2, &hhrtim%<timNum>->sTimerxRegs[1].CMP2xR, 1);
                    %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_B,HRTIM_OUTPUT_TB2);
                    %endif
                %endif
            %else
                       /* Start PWM output counter */
                %if(ISEQUAL(B_DMA, "on"))
                        HAL_HRTIM_WaveformCountStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERID_TIMER_B);
                %elseif(ISEQUAL(B_IT_global, "on"))
                        HAL_HRTIM_WaveformCountStart_IT(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_B);
                %else
                        HAL_HRTIM_WaveformCountStart(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_B);
                %endif
                %if(ISEQUAL(TB1_Enable, "on"))
                        /* Start PWM output signal TB1 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TB1);
                %endif
                %if(ISEQUAL(TB2_Enable, "on"))
                        /* Start PWM output signal TB2 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TB2);
                %endif
            %endif
        %endif
        %%%%%%%%%%%%%%%%  TIMER C  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(C_Used,"on"))
            /*Set Timer C compare registers */
            %if ( %<C_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, (uint32_t)(%<C_Unit1>));
            %endif
            %if ( %<C_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, (uint32_t)(%<C_Unit2>));
            %endif
            %if ( %<C_Unit3> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, (uint32_t)(%<C_Unit3>));
            %endif
            %if ( %<C_Unit4> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_4, (uint32_t)(%<C_Unit4>));
            %endif
            %if (ISEQUAL(C_Mode,"Basic"))
                    /* Start TimerC counter*/
                %if(ISEQUAL(C_DMA, "on"))
                    HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,%<HRTIM_Name>_DataLink.C_PWM_Period, (&hhrtim%<timNum>)->Instance->sTimerxRegs[2].PERxR, 1);
                %elseif(ISEQUAL(C_IT_global, "on"))
                    HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C);
                %else
                    HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C);
                %endif
                %if(ISEQUAL(C_Output_Comp1, "on"))
                        /* Start Output compare TC1 */
                    %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1,&%<HRTIM_Name>_DataLink.C_CompVal1, &hhrtim%<timNum>->sTimerxRegs[2].CMP1xR, 1);
                    %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1);
                    %endif
                %endif
                %if(ISEQUAL(C_Output_Comp2, "on"))
                        /* Start Output compare TC2 */
                    %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2,&%<HRTIM_Name>_DataLink.C_CompVal2, &hhrtim%<timNum>->sTimerxRegs[2].CMP2xR, 1);
                    %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2);
                    %endif
                %endif
                %if(ISEQUAL(C_Output_PWM1, "on"))
                        /* Start PWM output signal TC1 */
                    %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1,&%<HRTIM_Name>_DataLink.C_DutyVal1, &hhrtim%<timNum>->sTimerxRegs[2].CMP1xR, 1);
                    %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1);
                    %endif
                %endif
                %if(ISEQUAL(C_Output_PWM2, "on"))
                        /* Start PWM output signal TC2 */
                    %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2,&%<HRTIM_Name>_DataLink.C_DutyVal2, &hhrtim%<timNum>->sTimerxRegs[2].CMP2xR, 1);
                    %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2);
                    %endif
                %endif
                %if(ISEQUAL(C_OnePulse1, "on"))
                        /* Start One Pulse output signal TC1 */
                    %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1,&%<HRTIM_Name>_DataLink.C_OnePulse_CompVal1, &hhrtim%<timNum>->sTimerxRegs[2].CMP1xR, 1);
                    %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC1);
                    %endif
                %endif
                %if(ISEQUAL(C_OnePulse2, "on"))
                        /* Start One Pulse output signal TC2 */
                    %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2,&%<HRTIM_Name>_DataLink.C_OnePulse_CompVal2, &hhrtim%<timNum>->sTimerxRegs[2].CMP2xR, 1);
                    %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_C,HRTIM_OUTPUT_TC2);
                    %endif
                %endif
            %else
                       /* Start PWM output counter */
                %if(ISEQUAL(C_DMA, "on"))
                        HAL_HRTIM_WaveformCountStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERID_TIMER_C);
                %elseif(ISEQUAL(C_IT_global, "on"))
                        HAL_HRTIM_WaveformCountStart_IT(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_C);
                %else
                        HAL_HRTIM_WaveformCountStart(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_C);
                %endif
                %if(ISEQUAL(TC1_Enable, "on"))
                        /* Start PWM output signal TC1 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TC1);
                %endif
                %if(ISEQUAL(TC2_Enable, "on"))
                        /* Start PWM output signal TC2 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TC2);
                %endif
            %endif
        %endif
        %%%%%%%%%%%%%%%%  TIMER D  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(D_Used,"on"))
            /*Set Timer D compare registers */
            %if ( %<D_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, (uint32_t)(%<D_Unit1>));
            %endif
            %if ( %<D_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, (uint32_t)(%<D_Unit2>));
            %endif
            %if ( %<D_Unit3> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_3, (uint32_t)(%<D_Unit3>));
            %endif
            %if ( %<D_Unit4> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_4, (uint32_t)(%<D_Unit4>));
            %endif
            %if (ISEQUAL(D_Mode,"Basic"))
                    /* Start TimerD counter*/
                %if(ISEQUAL(D_DMA, "on"))
                    HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,%<HRTIM_Name>_DataLink.D_PWM_Period, (&hhrtim%<timNum>)->Instance->sTimerxRegs[3].PERxR, 1);
                %elseif(ISEQUAL(D_IT_global, "on"))
                    HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D);
                %else
                    HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D);
                %endif
                %if(ISEQUAL(D_Output_Comp1, "on"))
                        /* Start Output compare TD1 */
                    %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1,&%<HRTIM_Name>_DataLink.D_CompVal1, &hhrtim%<timNum>->sTimerxRegs[3].CMP1xR, 1);
                    %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1);
                    %endif
                %endif
                %if(ISEQUAL(D_Output_Comp2, "on"))
                        /* Start Output compare TD2 */
                    %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2,&%<HRTIM_Name>_DataLink.D_CompVal2, &hhrtim%<timNum>->sTimerxRegs[3].CMP2xR, 1);
                    %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2);
                    %endif
                %endif
                %if(ISEQUAL(D_Output_PWM1, "on"))
                        /* Start PWM output signal TD1 */
                    %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1,&%<HRTIM_Name>_DataLink.D_DutyVal1, &hhrtim%<timNum>->sTimerxRegs[3].CMP1xR, 1);
                    %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1);
                    %endif
                %endif
                %if(ISEQUAL(D_Output_PWM2, "on"))
                        /* Start PWM output signal TD2 */
                    %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2,&%<HRTIM_Name>_DataLink.D_DutyVal2, &hhrtim%<timNum>->sTimerxRegs[3].CMP2xR, 1);
                    %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2);
                    %endif
                %endif
                %if(ISEQUAL(D_OnePulse1, "on"))
                        /* Start One Pulse output signal TD1 */
                    %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1,&%<HRTIM_Name>_DataLink.D_OnePulse_CompVal1, &hhrtim%<timNum>->sTimerxRegs[3].CMP1xR, 1);
                    %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD1);
                    %endif
                %endif
                %if(ISEQUAL(D_OnePulse2, "on"))
                        /* Start One Pulse output signal TD2 */
                    %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2,&%<HRTIM_Name>_DataLink.D_OnePulse_CompVal2, &hhrtim%<timNum>->sTimerxRegs[3].CMP2xR, 1);
                    %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_D,HRTIM_OUTPUT_TD2);
                    %endif
                %endif
            %else
                       /* Start PWM output counter */
                %if(ISEQUAL(D_DMA, "on"))
                        HAL_HRTIM_WaveformCountStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERID_TIMER_D);
                %elseif(ISEQUAL(D_IT_global, "on"))
                        HAL_HRTIM_WaveformCountStart_IT(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_D);
                %else
                        HAL_HRTIM_WaveformCountStart(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_D);
                %endif
                %if(ISEQUAL(TD1_Enable, "on"))
                        /* Start PWM output signal TD1 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TD1);
                %endif
                %if(ISEQUAL(TD2_Enable, "on"))
                        /* Start PWM output signal TD2 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TD2);
                %endif
            %endif
        %endif
        %%%%%%%%%%%%%%%%  TIMER E  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(E_Used,"on"))
            /*Set Timer E compare registers */
            %if ( %<E_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, (uint32_t)(%<E_Unit1>));
            %endif
            %if ( %<E_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, (uint32_t)(%<E_Unit2>));
            %endif
            %if ( %<E_Unit3> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, (uint32_t)(%<E_Unit3>));
            %endif
            %if ( %<E_Unit4> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, (uint32_t)(%<E_Unit4>));
            %endif
            %if (ISEQUAL(E_Mode,"Basic"))
                    /* Start TimerE counter*/
                %if(ISEQUAL(E_DMA, "on"))
                    HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,%<HRTIM_Name>_DataLink.E_PWM_Period, (&hhrtim%<timNum>)->Instance->sTimerxRegs[4].PERxR, 1);
                %elseif(ISEQUAL(E_IT_global, "on"))
                    HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E);
                %else
                    HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E);
                %endif
                %if(ISEQUAL(E_Output_Comp1, "on"))
                        /* Start Output compare TE1 */
                    %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1,&%<HRTIM_Name>_DataLink.E_CompVal1, &hhrtim%<timNum>->sTimerxRegs[4].CMP1xR, 1);
                    %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1);
                    %endif
                %endif
                %if(ISEQUAL(E_Output_Comp2, "on"))
                        /* Start Output compare TE2 */
                    %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2,&%<HRTIM_Name>_DataLink.E_CompVal2, &hhrtim%<timNum>->sTimerxRegs[4].CMP2xR, 1);
                    %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2);
                    %endif
                %endif
                %if(ISEQUAL(E_Output_PWM1, "on"))
                        /* Start PWM output signal TE1 */
                    %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1,&%<HRTIM_Name>_DataLink.E_DutyVal1, &hhrtim%<timNum>->sTimerxRegs[4].CMP1xR, 1);
                    %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1);
                    %endif
                %endif
                %if(ISEQUAL(E_Output_PWM2, "on"))
                        /* Start PWM output signal TE2 */
                    %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2,&%<HRTIM_Name>_DataLink.E_DutyVal2, &hhrtim%<timNum>->sTimerxRegs[4].CMP2xR, 1);
                    %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2);
                    %endif
                %endif
                %if(ISEQUAL(E_OnePulse1, "on"))
                        /* Start One Pulse output signal TE1 */
                    %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1,&%<HRTIM_Name>_DataLink.E_OnePulse_CompVal1, &hhrtim%<timNum>->sTimerxRegs[4].CMP1xR, 1);
                    %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE1);
                    %endif
                %endif
                %if(ISEQUAL(E_OnePulse2, "on"))
                        /* Start One Pulse output signal TE2 */
                    %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2,&%<HRTIM_Name>_DataLink.E_OnePulse_CompVal2, &hhrtim%<timNum>->sTimerxRegs[4].CMP2xR, 1);
                    %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_E,HRTIM_OUTPUT_TE2);
                    %endif
                %endif
            %else
                       /* Start PWM output counter */
                %if(ISEQUAL(E_DMA, "on"))
                        HAL_HRTIM_WaveformCountStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERID_TIMER_E);
                %elseif(ISEQUAL(E_IT_global, "on"))
                        HAL_HRTIM_WaveformCountStart_IT(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_E);
                %else
                        HAL_HRTIM_WaveformCountStart(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_E);
                %endif
                %if(ISEQUAL(TE1_Enable, "on"))
                        /* Start PWM output signal TE1 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TE1);
                %endif
                %if(ISEQUAL(TE2_Enable, "on"))
                        /* Start PWM output signal TE2 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TE2);
                %endif
            %endif
        %endif
        %%%%%%%%%%%%%%%%  TIMER F  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %if (ISEQUAL(F_Used,"on"))
            /*Set Timer F compare registers */
            %if ( %<F_Unit1> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_1, (uint32_t)(%<F_Unit1>));
            %endif
            %if ( %<F_Unit2> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_2, (uint32_t)(%<F_Unit2>));
            %endif
            %if ( %<F_Unit3> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_3, (uint32_t)(%<F_Unit3>));
            %endif
            %if ( %<F_Unit4> != 0)
            __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_4, (uint32_t)(%<F_Unit4>));
            %endif
            %if (ISEQUAL(F_Mode,"Basic"))
                    /* Start TimerF counter*/
                %if(ISEQUAL(F_DMA, "on"))
                    HAL_HRTIM_SimpleBaseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,%<HRTIM_Name>_DataLink.F_PWM_Period, (&hhrtim%<timNum>)->Instance->sTimerxRegs[5].PERxR, 1);
                %elseif(ISEQUAL(F_IT_global, "on"))
                    HAL_HRTIM_SimpleBaseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F);
                %else
                    HAL_HRTIM_SimpleBaseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F);
                %endif
                %if(ISEQUAL(F_Output_Comp1, "on"))
                        /* Start Output compare TF1 */
                    %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1,&%<HRTIM_Name>_DataLink.F_CompVal1, &hhrtim%<timNum>->sTimerxRegs[5].CMP1xR, 1);
                    %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1);
                    %endif
                %endif
                %if(ISEQUAL(F_Output_Comp2, "on"))
                        /* Start Output compare TF2 */
                    %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_SimpleOCStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2,&%<HRTIM_Name>_DataLink.F_CompVal2, &hhrtim%<timNum>->sTimerxRegs[5].CMP2xR, 1);
                    %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_SimpleOCStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2);
                    %else
                        HAL_HRTIM_SimpleOCStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2);
                    %endif
                %endif
                %if(ISEQUAL(F_Output_PWM1, "on"))
                        /* Start PWM output signal TF1 */
                    %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1,&%<HRTIM_Name>_DataLink.F_DutyVal1, &hhrtim%<timNum>->sTimerxRegs[5].CMP1xR, 1);
                    %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1);
                    %endif
                %endif
                %if(ISEQUAL(F_Output_PWM2, "on"))
                        /* Start PWM output signal TF2 */
                    %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_SimplePWMStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2,&%<HRTIM_Name>_DataLink.F_DutyVal2, &hhrtim%<timNum>->sTimerxRegs[5].CMP2xR, 1);
                    %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_SimplePWMStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2);
                    %else
                        HAL_HRTIM_SimplePWMStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2);
                    %endif
                %endif
                %if(ISEQUAL(F_OnePulse1, "on"))
                        /* Start One Pulse output signal TF1 */
                    %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1,&%<HRTIM_Name>_DataLink.F_OnePulse_CompVal1, &hhrtim%<timNum>->sTimerxRegs[5].CMP1xR, 1);
                    %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF1);
                    %endif
                %endif
                %if(ISEQUAL(F_OnePulse2, "on"))
                        /* Start One Pulse output signal TF2 */
                    %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2,&%<HRTIM_Name>_DataLink.F_OnePulse_CompVal2, &hhrtim%<timNum>->sTimerxRegs[5].CMP2xR, 1);
                    %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_SimpleOnePulseStart_IT(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2);
                    %else
                        HAL_HRTIM_SimpleOnePulseStart(&hhrtim%<timNum>,HRTIM_TIMERINDEX_TIMER_F,HRTIM_OUTPUT_TF2);
                    %endif
                %endif
            %else
                       /* Start PWM output counter */
                %if(ISEQUAL(F_DMA, "on"))
                        HAL_HRTIM_WaveformCountStart_DMA(&hhrtim%<timNum>, HRTIM_TIMERID_TIMER_F);
                %elseif(ISEQUAL(F_IT_global, "on"))
                        HAL_HRTIM_WaveformCountStart_IT(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_F);
                %else
                        HAL_HRTIM_WaveformCountStart(&hhrtim%<timNum>,HRTIM_TIMERID_TIMER_F);
                %endif
                %if(ISEQUAL(TF1_Enable, "on"))
                        /* Start PWM output signal TF1 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TF1);
                %endif
                %if(ISEQUAL(TF2_Enable, "on"))
                        /* Start PWM output signal TF2 */
                        HAL_HRTIM_WaveformOutputStart(&hhrtim%<timNum>,HRTIM_OUTPUT_TF2);
                %endif
            %endif
        %endif
        %if(ISEQUAL(TIM_IRQ_F1, "on"))
            /* Enable HRTIM%<timNum> Fault1 interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_FLT1);
        %endif
        %if(ISEQUAL(TIM_IRQ_F2, "on"))
            /* Enable HRTIM%<timNum> Fault2 interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_FLT2);
        %endif
        %if(ISEQUAL(TIM_IRQ_F3, "on"))
            /* Enable HRTIM%<timNum> Fault3 interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_FLT3);
        %endif
        %if(ISEQUAL(TIM_IRQ_F4, "on"))
            /* Enable HRTIM%<timNum> Fault4 interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_FLT4);
        %endif
        %if(ISEQUAL(TIM_IRQ_F5, "on"))
            /* Enable HRTIM%<timNum> Fault5 interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_FLT5);
        %endif
        %if(ISEQUAL(TIM_IRQ_F6, "on"))
            /* Enable HRTIM%<timNum> Fault6 interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_FLT6);
        %endif
        %if(ISEQUAL(TIM_IRQ_SF, "on"))
            /* Enable HRTIM%<timNum> System Fault interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_SYSFLT);
        %endif
        %if(ISEQUAL(TIM_IRQ_BMP, "on"))
            /* Enable HRTIM%<timNum> Burst mode period interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_BMPER);
        %endif
        %if(ISEQUAL(TIM_IRQ_DLLCALL, "on"))
            /* Enable HRTIM%<timNum> DLL ready interrupt*/
            __HAL_HRTIM_ENABLE_IT(&hhrtim%<timNum>, HRTIM_IT_DLLRDY);
        %endif
        }
        %closefile HRTIM_Buf
        %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
        %%End of InsertHRTIM test
        %endif
    %endfunction

%% Function: Outputs ==========================================
%% Abstract:
%% HRTimers input value depending on pin config
%%
%function Outputs(block, system) Output
    %%model.c and model.h files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign modelH      = LibCreateSourceFile("Header", "Simulink", SrcBaseName)
    %assign modelC      = LibCreateSourceFile("Source", "Simulink", SrcBaseName)
    %%model_HRTIM.h and model_HRTIM.c files
    %assign SrcBaseName_HRTIM = "%<SrcBaseName>_HRTIM"
    %assign modelH_HRTIM      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_HRTIM)
    %assign modelC_HRTIM      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_HRTIM)

    %%%%%%%%%%%%%%%%%%%%%% HRTIM %%%%%%%%%%%%%%%%%%%%%%%%%
    %assign NbHRTim  = SFcnParamSettings.NbHRTim
    %assign HRTIM_Name = SFcnParamSettings.HRTIM_Name
    %assign HRTIM_Clock = SFcnParamSettings.HRTIM_Clock
    %assign TIM_IRQ_F1 = SFcnParamSettings.TIM_IRQ_F1
    %assign TIM_IRQ_F2 = SFcnParamSettings.TIM_IRQ_F2
    %assign TIM_IRQ_F3 = SFcnParamSettings.TIM_IRQ_F3
    %assign TIM_IRQ_F4 = SFcnParamSettings.TIM_IRQ_F4
    %assign TIM_IRQ_F5 = SFcnParamSettings.TIM_IRQ_F5
    %assign TIM_IRQ_F6 = SFcnParamSettings.TIM_IRQ_F6
    %assign TIM_IRQ_SF = SFcnParamSettings.TIM_IRQ_SF
    %assign TIM_IRQ_BMP = SFcnParamSettings.TIM_IRQ_BMP
    %assign TIM_IRQ_DLLCALL = SFcnParamSettings.TIM_IRQ_DLLCALL
    %assign TIM_IRQ_SYNC = SFcnParamSettings.TIM_IRQ_SYNC
    %assign TIM_IRQ_BURST_DMA = SFcnParamSettings.TIM_IRQ_BURST_DMA
    %assign TIM_IRQ_DMA_ERR = SFcnParamSettings.TIM_IRQ_DMA_ERR
    %assign M_DMA = SFcnParamSettings.M_DMA
    %assign M_IT_global = SFcnParamSettings.M_IT_global
    %assign M_Tim_div = SFcnParamSettings.M_Tim_div
    %assign M_Period = SFcnParamSettings.M_Period
    %assign M_PWM_Period = SFcnParamSettings.M_PWM_Period
    %assign M_Unit1 = SFcnParamSettings.M_Unit1
    %assign M_Unit2 = SFcnParamSettings.M_Unit2
    %assign M_Unit3 = SFcnParamSettings.M_Unit3
    %assign M_Unit4 = SFcnParamSettings.M_Unit4
    %assign TIM_IRQ_UPDM = SFcnParamSettings.TIM_IRQ_UPDM
    %assign TIM_IRQ_REPM = SFcnParamSettings.TIM_IRQ_REPM
    %assign TIM_IRQ_COMP1 = SFcnParamSettings.TIM_IRQ_COMP1
    %assign TIM_IRQ_COMP2 = SFcnParamSettings.TIM_IRQ_COMP2
    %assign TIM_IRQ_COMP3 = SFcnParamSettings.TIM_IRQ_COMP3
    %assign TIM_IRQ_COMP4 = SFcnParamSettings.TIM_IRQ_COMP4
    %assign A_Mode = SFcnParamSettings.A_Mode
    %assign A_DMA = SFcnParamSettings.A_DMA
    %assign A_IT_global = SFcnParamSettings.A_IT_global
    %assign A_Tim_div = SFcnParamSettings.A_Tim_div
    %assign A_Period = SFcnParamSettings.A_Period
    %assign A_PWM_Period = SFcnParamSettings.A_PWM_Period
    %assign A_Capture1 = SFcnParamSettings.A_Capture1
    %assign A_Capture2 = SFcnParamSettings.A_Capture2
    %assign TA1_Enable = SFcnParamSettings.TA1_Enable
    %assign TA1_Polarity = SFcnParamSettings.TA1_Polarity
    %assign TA1_Chopper = SFcnParamSettings.TA1_Chopper
    %assign TA2_Enable = SFcnParamSettings.TA2_Enable
    %assign TA2_Polarity = SFcnParamSettings.TA2_Polarity
    %assign TA2_Chopper = SFcnParamSettings.TA2_Chopper
    %assign A_Unit1 = SFcnParamSettings.A_Unit1
    %assign A_Unit2 = SFcnParamSettings.A_Unit2
    %assign A_Unit3 = SFcnParamSettings.A_Unit3
    %assign A_Unit4 = SFcnParamSettings.A_Unit4
    %assign A_Output_Comp1 = SFcnParamSettings.A_Output_Comp1
    %assign A_Comp_Polarity1 = SFcnParamSettings.A_Comp_Polarity1
    %assign A_CompVal1 = SFcnParamSettings.A_CompVal1
    %assign A_Output_Comp2 = SFcnParamSettings.A_Output_Comp2
    %assign A_Comp_Polarity2 = SFcnParamSettings.A_Comp_Polarity2
    %assign A_CompVal2 = SFcnParamSettings.A_CompVal2
    %assign A_Output_PWM1 = SFcnParamSettings.A_Output_PWM1
    %assign A_Output_Polarity1 = SFcnParamSettings.A_Output_Polarity1
    %assign A_DutyVal1 = SFcnParamSettings.A_DutyVal1
    %assign A_DutyIn1 = SFcnParamSettings.A_DutyIn1
    %assign A_Output_PWM2 = SFcnParamSettings.A_Output_PWM2
    %assign A_Output_Polarity2 = SFcnParamSettings.A_Output_Polarity2
    %assign A_DutyVal2 = SFcnParamSettings.A_DutyVal2
    %assign A_DutyIn2 = SFcnParamSettings.A_DutyIn2
    %assign A_OnePulse1 = SFcnParamSettings.A_OnePulse1
    %assign A_OnePulse_Polarity1 = SFcnParamSettings.A_OnePulse_Polarity1
    %assign A_OnePulse_CompVal1 = SFcnParamSettings.A_OnePulse_CompVal1
    %assign A_OnePulse2 = SFcnParamSettings.A_OnePulse2
    %assign A_OnePulse_Polarity2 = SFcnParamSettings.A_OnePulse_Polarity2
    %assign A_OnePulse_CompVal2 = SFcnParamSettings.A_OnePulse_CompVal2
    %assign TIM_IRQ_UPDA = SFcnParamSettings.TIM_IRQ_UPDA
    %assign TIM_IRQ_REPA = SFcnParamSettings.TIM_IRQ_REPA
    %assign TIM_IRQ_COMP1A = SFcnParamSettings.TIM_IRQ_COMP1A
    %assign TIM_IRQ_COMP2A = SFcnParamSettings.TIM_IRQ_COMP2A
    %assign TIM_IRQ_COMP3A = SFcnParamSettings.TIM_IRQ_COMP3A
    %assign TIM_IRQ_COMP4A = SFcnParamSettings.TIM_IRQ_COMP4A
    %assign TIM_IRQ_CAPT1A = SFcnParamSettings.TIM_IRQ_CAPT1A
    %assign TIM_IRQ_CAPT2A = SFcnParamSettings.TIM_IRQ_CAPT2A
    %assign TIM_IRQ_DELA = SFcnParamSettings.TIM_IRQ_DELA
    %assign TIM_IRQ_RESET_CPTA = SFcnParamSettings.TIM_IRQ_RESET_CPTA
    %assign TIM_IRQ_OUT1SA = SFcnParamSettings.TIM_IRQ_OUT1SA
    %assign TIM_IRQ_OUT1RA = SFcnParamSettings.TIM_IRQ_OUT1RA
    %assign TIM_IRQ_OUT2SA = SFcnParamSettings.TIM_IRQ_OUT2SA
    %assign TIM_IRQ_OUT2RA = SFcnParamSettings.TIM_IRQ_OUT2RA
    %assign B_Mode = SFcnParamSettings.B_Mode
    %assign B_DMA = SFcnParamSettings.B_DMA
    %assign B_IT_global = SFcnParamSettings.B_IT_global
    %assign B_Tim_div = SFcnParamSettings.B_Tim_div
    %assign B_Period = SFcnParamSettings.B_Period
    %assign B_PWM_Period = SFcnParamSettings.B_PWM_Period
    %assign B_Capture1 = SFcnParamSettings.B_Capture1
    %assign B_Capture2 = SFcnParamSettings.B_Capture2
    %assign TB1_Enable = SFcnParamSettings.TB1_Enable
    %assign TB1_Polarity = SFcnParamSettings.TB1_Polarity
    %assign TB1_Chopper = SFcnParamSettings.TB1_Chopper
    %assign TB2_Enable = SFcnParamSettings.TB2_Enable
    %assign TB2_Polarity = SFcnParamSettings.TB2_Polarity
    %assign TB2_Chopper = SFcnParamSettings.TB2_Chopper
    %assign B_Unit1 = SFcnParamSettings.B_Unit1
    %assign B_Unit2 = SFcnParamSettings.B_Unit2
    %assign B_Unit3 = SFcnParamSettings.B_Unit3
    %assign B_Unit4 = SFcnParamSettings.B_Unit4
    %assign B_Output_Comp1 = SFcnParamSettings.B_Output_Comp1
    %assign B_Comp_Polarity1 = SFcnParamSettings.B_Comp_Polarity1
    %assign B_CompVal1 = SFcnParamSettings.B_CompVal1
    %assign B_Output_Comp2 = SFcnParamSettings.B_Output_Comp2
    %assign B_Comp_Polarity2 = SFcnParamSettings.B_Comp_Polarity2
    %assign B_CompVal2 = SFcnParamSettings.B_CompVal2
    %assign B_Output_PWM1 = SFcnParamSettings.B_Output_PWM1
    %assign B_Output_Polarity1 = SFcnParamSettings.B_Output_Polarity1
    %assign B_DutyVal1 = SFcnParamSettings.B_DutyVal1
    %assign B_DutyIn1 = SFcnParamSettings.B_DutyIn1
    %assign B_Output_PWM2 = SFcnParamSettings.B_Output_PWM2
    %assign B_Output_Polarity2 = SFcnParamSettings.B_Output_Polarity2
    %assign B_DutyVal2 = SFcnParamSettings.B_DutyVal2
    %assign B_DutyIn2 = SFcnParamSettings.B_DutyIn2
    %assign B_OnePulse1 = SFcnParamSettings.B_OnePulse1
    %assign B_OnePulse_Polarity1 = SFcnParamSettings.B_OnePulse_Polarity1
    %assign B_OnePulse_CompVal1 = SFcnParamSettings.B_OnePulse_CompVal1
    %assign B_OnePulse2 = SFcnParamSettings.B_OnePulse2
    %assign B_OnePulse_Polarity2 = SFcnParamSettings.B_OnePulse_Polarity2
    %assign B_OnePulse_CompVal2 = SFcnParamSettings.B_OnePulse_CompVal2
    %assign TIM_IRQ_UPDB = SFcnParamSettings.TIM_IRQ_UPDB
    %assign TIM_IRQ_REPB = SFcnParamSettings.TIM_IRQ_REPB
    %assign TIM_IRQ_COMP1B = SFcnParamSettings.TIM_IRQ_COMP1B
    %assign TIM_IRQ_COMP2B = SFcnParamSettings.TIM_IRQ_COMP2B
    %assign TIM_IRQ_COMP3B = SFcnParamSettings.TIM_IRQ_COMP3B
    %assign TIM_IRQ_COMP4B = SFcnParamSettings.TIM_IRQ_COMP4B
    %assign TIM_IRQ_CAPT1B = SFcnParamSettings.TIM_IRQ_CAPT1B
    %assign TIM_IRQ_CAPT2B = SFcnParamSettings.TIM_IRQ_CAPT2B
    %assign TIM_IRQ_DELB = SFcnParamSettings.TIM_IRQ_DELB
    %assign TIM_IRQ_RESET_CPTB = SFcnParamSettings.TIM_IRQ_RESET_CPTB
    %assign TIM_IRQ_OUT1SB = SFcnParamSettings.TIM_IRQ_OUT1SB
    %assign TIM_IRQ_OUT1RB = SFcnParamSettings.TIM_IRQ_OUT1RB
    %assign TIM_IRQ_OUT2SB = SFcnParamSettings.TIM_IRQ_OUT2SB
    %assign TIM_IRQ_OUT2RB = SFcnParamSettings.TIM_IRQ_OUT2RB
    %assign C_Mode = SFcnParamSettings.C_Mode
    %assign C_DMA = SFcnParamSettings.C_DMA
    %assign C_IT_global = SFcnParamSettings.C_IT_global
    %assign C_Tim_div = SFcnParamSettings.C_Tim_div
    %assign C_Period = SFcnParamSettings.C_Period
    %assign C_PWM_Period = SFcnParamSettings.C_PWM_Period
    %assign C_Capture1 = SFcnParamSettings.C_Capture1
    %assign C_Capture2 = SFcnParamSettings.C_Capture2
    %assign TC1_Enable = SFcnParamSettings.TC1_Enable
    %assign TC1_Polarity = SFcnParamSettings.TC1_Polarity
    %assign TC1_Chopper = SFcnParamSettings.TC1_Chopper
    %assign TC2_Enable = SFcnParamSettings.TC2_Enable
    %assign TC2_Polarity = SFcnParamSettings.TC2_Polarity
    %assign TC2_Chopper = SFcnParamSettings.TC2_Chopper
    %assign C_Unit1 = SFcnParamSettings.C_Unit1
    %assign C_Unit2 = SFcnParamSettings.C_Unit2
    %assign C_Unit3 = SFcnParamSettings.C_Unit3
    %assign C_Unit4 = SFcnParamSettings.C_Unit4
    %assign C_Output_Comp1 = SFcnParamSettings.C_Output_Comp1
    %assign C_Comp_Polarity1 = SFcnParamSettings.C_Comp_Polarity1
    %assign C_CompVal1 = SFcnParamSettings.C_CompVal1
    %assign C_Output_Comp2 = SFcnParamSettings.C_Output_Comp2
    %assign C_Comp_Polarity2 = SFcnParamSettings.C_Comp_Polarity2
    %assign C_CompVal2 = SFcnParamSettings.C_CompVal2
    %assign C_Output_PWM1 = SFcnParamSettings.C_Output_PWM1
    %assign C_Output_Polarity1 = SFcnParamSettings.C_Output_Polarity1
    %assign C_DutyVal1 = SFcnParamSettings.C_DutyVal1
    %assign C_DutyIn1 = SFcnParamSettings.C_DutyIn1
    %assign C_Output_PWM2 = SFcnParamSettings.C_Output_PWM2
    %assign C_Output_Polarity2 = SFcnParamSettings.C_Output_Polarity2
    %assign C_DutyVal2 = SFcnParamSettings.C_DutyVal2
    %assign C_DutyIn2 = SFcnParamSettings.C_DutyIn2
    %assign C_OnePulse1 = SFcnParamSettings.C_OnePulse1
    %assign C_OnePulse_Polarity1 = SFcnParamSettings.C_OnePulse_Polarity1
    %assign C_OnePulse_CompVal1 = SFcnParamSettings.C_OnePulse_CompVal1
    %assign C_OnePulse2 = SFcnParamSettings.C_OnePulse2
    %assign C_OnePulse_Polarity2 = SFcnParamSettings.C_OnePulse_Polarity2
    %assign C_OnePulse_CompVal2 = SFcnParamSettings.C_OnePulse_CompVal2
    %assign TIM_IRQ_UPDC = SFcnParamSettings.TIM_IRQ_UPDC
    %assign TIM_IRQ_REPC = SFcnParamSettings.TIM_IRQ_REPC
    %assign TIM_IRQ_COMP1C = SFcnParamSettings.TIM_IRQ_COMP1C
    %assign TIM_IRQ_COMP2C = SFcnParamSettings.TIM_IRQ_COMP2C
    %assign TIM_IRQ_COMP3C = SFcnParamSettings.TIM_IRQ_COMP3C
    %assign TIM_IRQ_COMP4C = SFcnParamSettings.TIM_IRQ_COMP4C
    %assign TIM_IRQ_CAPT1C = SFcnParamSettings.TIM_IRQ_CAPT1C
    %assign TIM_IRQ_CAPT2C = SFcnParamSettings.TIM_IRQ_CAPT2C
    %assign TIM_IRQ_DELC = SFcnParamSettings.TIM_IRQ_DELC
    %assign TIM_IRQ_RESET_CPTC = SFcnParamSettings.TIM_IRQ_RESET_CPTC
    %assign TIM_IRQ_OUT1SC = SFcnParamSettings.TIM_IRQ_OUT1SC
    %assign TIM_IRQ_OUT1RC = SFcnParamSettings.TIM_IRQ_OUT1RC
    %assign TIM_IRQ_OUT2SC = SFcnParamSettings.TIM_IRQ_OUT2SC
    %assign TIM_IRQ_OUT2RC = SFcnParamSettings.TIM_IRQ_OUT2RC
    %assign D_Mode = SFcnParamSettings.D_Mode
    %assign D_DMA = SFcnParamSettings.D_DMA
    %assign D_IT_global = SFcnParamSettings.D_IT_global
    %assign D_Tim_div = SFcnParamSettings.D_Tim_div
    %assign D_Period = SFcnParamSettings.D_Period
    %assign D_PWM_Period = SFcnParamSettings.D_PWM_Period
    %assign D_Capture1 = SFcnParamSettings.D_Capture1
    %assign D_Capture2 = SFcnParamSettings.D_Capture2
    %assign TD1_Enable = SFcnParamSettings.TD1_Enable
    %assign TD1_Polarity = SFcnParamSettings.TD1_Polarity
    %assign TD1_Chopper = SFcnParamSettings.TD1_Chopper
    %assign TD2_Enable = SFcnParamSettings.TD2_Enable
    %assign TD2_Polarity = SFcnParamSettings.TD2_Polarity
    %assign TD2_Chopper = SFcnParamSettings.TD2_Chopper
    %assign D_Unit1 = SFcnParamSettings.D_Unit1
    %assign D_Unit2 = SFcnParamSettings.D_Unit2
    %assign D_Unit3 = SFcnParamSettings.D_Unit3
    %assign D_Unit4 = SFcnParamSettings.D_Unit4
    %assign D_Output_Comp1 = SFcnParamSettings.D_Output_Comp1
    %assign D_Comp_Polarity1 = SFcnParamSettings.D_Comp_Polarity1
    %assign D_CompVal1 = SFcnParamSettings.D_CompVal1
    %assign D_Output_Comp2 = SFcnParamSettings.D_Output_Comp2
    %assign D_Comp_Polarity2 = SFcnParamSettings.D_Comp_Polarity2
    %assign D_CompVal2 = SFcnParamSettings.D_CompVal2
    %assign D_Output_PWM1 = SFcnParamSettings.D_Output_PWM1
    %assign D_Output_Polarity1 = SFcnParamSettings.D_Output_Polarity1
    %assign D_DutyVal1 = SFcnParamSettings.D_DutyVal1
    %assign D_DutyIn1 = SFcnParamSettings.D_DutyIn1
    %assign D_Output_PWM2 = SFcnParamSettings.D_Output_PWM2
    %assign D_Output_Polarity2 = SFcnParamSettings.D_Output_Polarity2
    %assign D_DutyVal2 = SFcnParamSettings.D_DutyVal2
    %assign D_DutyIn2 = SFcnParamSettings.D_DutyIn2
    %assign D_OnePulse1 = SFcnParamSettings.D_OnePulse1
    %assign D_OnePulse_Polarity1 = SFcnParamSettings.D_OnePulse_Polarity1
    %assign D_OnePulse_CompVal1 = SFcnParamSettings.D_OnePulse_CompVal1
    %assign D_OnePulse2 = SFcnParamSettings.D_OnePulse2
    %assign D_OnePulse_Polarity2 = SFcnParamSettings.D_OnePulse_Polarity2
    %assign D_OnePulse_CompVal2 = SFcnParamSettings.D_OnePulse_CompVal2
    %assign TIM_IRQ_UPDD = SFcnParamSettings.TIM_IRQ_UPDD
    %assign TIM_IRQ_REPD = SFcnParamSettings.TIM_IRQ_REPD
    %assign TIM_IRQ_COMP1D = SFcnParamSettings.TIM_IRQ_COMP1D
    %assign TIM_IRQ_COMP2D = SFcnParamSettings.TIM_IRQ_COMP2D
    %assign TIM_IRQ_COMP3D = SFcnParamSettings.TIM_IRQ_COMP3D
    %assign TIM_IRQ_COMP4D = SFcnParamSettings.TIM_IRQ_COMP4D
    %assign TIM_IRQ_CAPT1D = SFcnParamSettings.TIM_IRQ_CAPT1D
    %assign TIM_IRQ_CAPT2D = SFcnParamSettings.TIM_IRQ_CAPT2D
    %assign TIM_IRQ_DELD = SFcnParamSettings.TIM_IRQ_DELD
    %assign TIM_IRQ_RESET_CPTD = SFcnParamSettings.TIM_IRQ_RESET_CPTD
    %assign TIM_IRQ_OUT1SD = SFcnParamSettings.TIM_IRQ_OUT1SD
    %assign TIM_IRQ_OUT1RD = SFcnParamSettings.TIM_IRQ_OUT1RD
    %assign TIM_IRQ_OUT2SD = SFcnParamSettings.TIM_IRQ_OUT2SD
    %assign TIM_IRQ_OUT2RD = SFcnParamSettings.TIM_IRQ_OUT2RD
    %assign E_Mode = SFcnParamSettings.E_Mode
    %assign E_DMA = SFcnParamSettings.E_DMA
    %assign E_IT_global = SFcnParamSettings.E_IT_global
    %assign E_Tim_div = SFcnParamSettings.E_Tim_div
    %assign E_Period = SFcnParamSettings.E_Period
    %assign E_PWM_Period = SFcnParamSettings.E_PWM_Period
    %assign E_Capture1 = SFcnParamSettings.E_Capture1
    %assign E_Capture2 = SFcnParamSettings.E_Capture2
    %assign TE1_Enable = SFcnParamSettings.TE1_Enable
    %assign TE1_Polarity = SFcnParamSettings.TE1_Polarity
    %assign TE1_Chopper = SFcnParamSettings.TE1_Chopper
    %assign TE2_Enable = SFcnParamSettings.TE2_Enable
    %assign TE2_Polarity = SFcnParamSettings.TE2_Polarity
    %assign TE2_Chopper = SFcnParamSettings.TE2_Chopper
    %assign E_Unit1 = SFcnParamSettings.E_Unit1
    %assign E_Unit2 = SFcnParamSettings.E_Unit2
    %assign E_Unit3 = SFcnParamSettings.E_Unit3
    %assign E_Unit4 = SFcnParamSettings.E_Unit4
    %assign E_Output_Comp1 = SFcnParamSettings.E_Output_Comp1
    %assign E_Comp_Polarity1 = SFcnParamSettings.E_Comp_Polarity1
    %assign E_CompVal1 = SFcnParamSettings.E_CompVal1
    %assign E_Output_Comp2 = SFcnParamSettings.E_Output_Comp2
    %assign E_Comp_Polarity2 = SFcnParamSettings.E_Comp_Polarity2
    %assign E_CompVal2 = SFcnParamSettings.E_CompVal2
    %assign E_Output_PWM1 = SFcnParamSettings.E_Output_PWM1
    %assign E_Output_Polarity1 = SFcnParamSettings.E_Output_Polarity1
    %assign E_DutyVal1 = SFcnParamSettings.E_DutyVal1
    %assign E_DutyIn1 = SFcnParamSettings.E_DutyIn1
    %assign E_Output_PWM2 = SFcnParamSettings.E_Output_PWM2
    %assign E_Output_Polarity2 = SFcnParamSettings.E_Output_Polarity2
    %assign E_DutyVal2 = SFcnParamSettings.E_DutyVal2
    %assign E_DutyIn2 = SFcnParamSettings.E_DutyIn2
    %assign E_OnePulse1 = SFcnParamSettings.E_OnePulse1
    %assign E_OnePulse_Polarity1 = SFcnParamSettings.E_OnePulse_Polarity1
    %assign E_OnePulse_CompVal1 = SFcnParamSettings.E_OnePulse_CompVal1
    %assign E_OnePulse2 = SFcnParamSettings.E_OnePulse2
    %assign E_OnePulse_Polarity2 = SFcnParamSettings.E_OnePulse_Polarity2
    %assign E_OnePulse_CompVal2 = SFcnParamSettings.E_OnePulse_CompVal2
    %assign TIM_IRQ_UPDE = SFcnParamSettings.TIM_IRQ_UPDE
    %assign TIM_IRQ_REPE = SFcnParamSettings.TIM_IRQ_REPE
    %assign TIM_IRQ_COMP1E = SFcnParamSettings.TIM_IRQ_COMP1E
    %assign TIM_IRQ_COMP2E = SFcnParamSettings.TIM_IRQ_COMP2E
    %assign TIM_IRQ_COMP3E = SFcnParamSettings.TIM_IRQ_COMP3E
    %assign TIM_IRQ_COMP4E = SFcnParamSettings.TIM_IRQ_COMP4E
    %assign TIM_IRQ_CAPT1E = SFcnParamSettings.TIM_IRQ_CAPT1E
    %assign TIM_IRQ_CAPT2E = SFcnParamSettings.TIM_IRQ_CAPT2E
    %assign TIM_IRQ_DELE = SFcnParamSettings.TIM_IRQ_DELE
    %assign TIM_IRQ_RESET_CPTE = SFcnParamSettings.TIM_IRQ_RESET_CPTE
    %assign TIM_IRQ_OUT1SE = SFcnParamSettings.TIM_IRQ_OUT1SE
    %assign TIM_IRQ_OUT1RE = SFcnParamSettings.TIM_IRQ_OUT1RE
    %assign TIM_IRQ_OUT2SE = SFcnParamSettings.TIM_IRQ_OUT2SE
    %assign TIM_IRQ_OUT2RE = SFcnParamSettings.TIM_IRQ_OUT2RE
    %assign F_Mode = SFcnParamSettings.F_Mode
    %assign F_DMA = SFcnParamSettings.F_DMA
    %assign F_IT_global = SFcnParamSettings.F_IT_global
    %assign F_Tim_div = SFcnParamSettings.F_Tim_div
    %assign F_Period = SFcnParamSettings.F_Period
    %assign F_PWM_Period = SFcnParamSettings.F_PWM_Period
    %assign F_Capture1 = SFcnParamSettings.F_Capture1
    %assign F_Capture2 = SFcnParamSettings.F_Capture2
    %assign TF1_Enable = SFcnParamSettings.TF1_Enable
    %assign TF1_Polarity = SFcnParamSettings.TF1_Polarity
    %assign TF1_Chopper = SFcnParamSettings.TF1_Chopper
    %assign TF2_Enable = SFcnParamSettings.TF2_Enable
    %assign TF2_Polarity = SFcnParamSettings.TF2_Polarity
    %assign TF2_Chopper = SFcnParamSettings.TF2_Chopper
    %assign F_Unit1 = SFcnParamSettings.F_Unit1
    %assign F_Unit2 = SFcnParamSettings.F_Unit2
    %assign F_Unit3 = SFcnParamSettings.F_Unit3
    %assign F_Unit4 = SFcnParamSettings.F_Unit4
    %assign F_Output_Comp1 = SFcnParamSettings.F_Output_Comp1
    %assign F_Comp_Polarity1 = SFcnParamSettings.F_Comp_Polarity1
    %assign F_CompVal1 = SFcnParamSettings.F_CompVal1
    %assign F_Output_Comp2 = SFcnParamSettings.F_Output_Comp2
    %assign F_Comp_Polarity2 = SFcnParamSettings.F_Comp_Polarity2
    %assign F_CompVal2 = SFcnParamSettings.F_CompVal2
    %assign F_Output_PWM1 = SFcnParamSettings.F_Output_PWM1
    %assign F_Output_Polarity1 = SFcnParamSettings.F_Output_Polarity1
    %assign F_DutyVal1 = SFcnParamSettings.F_DutyVal1
    %assign F_DutyIn1 = SFcnParamSettings.F_DutyIn1
    %assign F_Output_PWM2 = SFcnParamSettings.F_Output_PWM2
    %assign F_Output_Polarity2 = SFcnParamSettings.F_Output_Polarity2
    %assign F_DutyVal2 = SFcnParamSettings.F_DutyVal2
    %assign F_DutyIn2 = SFcnParamSettings.F_DutyIn2
    %assign F_OnePulse1 = SFcnParamSettings.F_OnePulse1
    %assign F_OnePulse_Polarity1 = SFcnParamSettings.F_OnePulse_Polarity1
    %assign F_OnePulse_CompVal1 = SFcnParamSettings.F_OnePulse_CompVal1
    %assign F_OnePulse2 = SFcnParamSettings.F_OnePulse2
    %assign F_OnePulse_Polarity2 = SFcnParamSettings.F_OnePulse_Polarity2
    %assign F_OnePulse_CompVal2 = SFcnParamSettings.F_OnePulse_CompVal2
    %assign TIM_IRQ_UPDF = SFcnParamSettings.TIM_IRQ_UPDF
    %assign TIM_IRQ_REPF = SFcnParamSettings.TIM_IRQ_REPF
    %assign TIM_IRQ_COMP1F = SFcnParamSettings.TIM_IRQ_COMP1F
    %assign TIM_IRQ_COMP2F = SFcnParamSettings.TIM_IRQ_COMP2F
    %assign TIM_IRQ_COMP3F = SFcnParamSettings.TIM_IRQ_COMP3F
    %assign TIM_IRQ_COMP4F = SFcnParamSettings.TIM_IRQ_COMP4F
    %assign TIM_IRQ_CAPT1F = SFcnParamSettings.TIM_IRQ_CAPT1F
    %assign TIM_IRQ_CAPT2F = SFcnParamSettings.TIM_IRQ_CAPT2F
    %assign TIM_IRQ_DELF = SFcnParamSettings.TIM_IRQ_DELF
    %assign TIM_IRQ_RESET_CPTF = SFcnParamSettings.TIM_IRQ_RESET_CPTF
    %assign TIM_IRQ_OUT1SF = SFcnParamSettings.TIM_IRQ_OUT1SF
    %assign TIM_IRQ_OUT1RF = SFcnParamSettings.TIM_IRQ_OUT1RF
    %assign TIM_IRQ_OUT2SF = SFcnParamSettings.TIM_IRQ_OUT2SF
    %assign TIM_IRQ_OUT2RF = SFcnParamSettings.TIM_IRQ_OUT2RF

    %assign timNum = IDNUM("%<HRTIM_Name>")[1]
    %%Number of the output link
    %assign chOffset = 0

        %%%%%%%% VERY IMPORTANT %%%%%%%%%
        %%%  DO NOT CHANGE INTERRUPT  %%%
        %%%     FUNCTION ORDER        %%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        %%-1-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_F1, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_F1) && (::HRTIM_IRQ_F1 == TLC_FALSE)
                %assign errTxt = "IRQ_F1 must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_F1    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Fault1Callback
            * Description    : %<HRTIM_Name> Fault1 event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for F1 IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-2-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_F2, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_F2) && (::HRTIM_IRQ_F2 == TLC_FALSE)
                %assign errTxt = "IRQ_F2 must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_F2    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Fault2Callback
            * Description    : %<HRTIM_Name> Fault2 event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for F2 IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-3-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_F3, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_F3) && (::HRTIM_IRQ_F3 == TLC_FALSE)
                %assign errTxt = "IRQ_F3 must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_F3    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Fault3Callback
            * Description    : %<HRTIM_Name> Fault3 event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for F3 IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-4-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_F4, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_F4) && (::HRTIM_IRQ_F4 == TLC_FALSE)
                %assign errTxt = "IRQ_F4 must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_F4    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Fault4Callback
            * Description    : %<HRTIM_Name> Fault4 event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for F4 IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-5-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_F5, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_F5) && (::HRTIM_IRQ_F5 == TLC_FALSE)
                %assign errTxt = "IRQ_F5 must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_F5    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Fault5Callback
            * Description    : %<HRTIM_Name> Fault5 event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for F5 IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif


        %%-6-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_F6, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_F6) && (::HRTIM_IRQ_F6 == TLC_FALSE)
                %assign errTxt = "IRQ_F6 must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_F6    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Fault6Callback
            * Description    : %<HRTIM_Name> Fault6 event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for F6 IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-7-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_SF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_SF) && (::HRTIM_IRQ_SF == TLC_FALSE)
                %assign errTxt = "IRQ_SF must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_SF    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_SystemFaultCallback
            * Description    : %<HRTIM_Name> System Fault event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for SF IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-8-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_BMP, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_BMP) && (::HRTIM_IRQ_BMP == TLC_FALSE)
                %assign errTxt = "IRQ_BMP must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_BMP    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_BurstModePeriodCallback
            * Description    : %<HRTIM_Name> Burst Mode event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for Burst Mode IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-9-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_DLLCALL, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_DLLCALL) && (::HRTIM_IRQ_DLLCALL == TLC_FALSE)
                %assign errTxt = "IRQ_DLLCALL must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_DLLCALL    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_DLLCalbrationReadyCallback
            * Description    : %<HRTIM_Name> DLL Calibration Ready event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_DLLCalbrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for DLL Calibration Ready IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-10-Process Global Interrupts
        %if (ISEQUAL(TIM_IRQ_SYNC, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_SYNC) && (::HRTIM_IRQ_SYNC == TLC_FALSE)
                %assign errTxt = "IRQ_SYNC must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_SYNC    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_SynchronizationEventCallback
            * Description    : %<HRTIM_Name> Synchronization event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for SYNC IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-11-Process DMA Interrupts
        %if (ISEQUAL(TIM_IRQ_BURST_DMA, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_BURST_DMA) && (::HRTIM_IRQ_BURST_DMA == TLC_FALSE)
                %assign errTxt = "IRQ_BURST_DMA must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_BURST_DMA    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_BurstDMATransferCallback
            * Description    : %<HRTIM_Name> Burst DMA Transfer event interrupt callback
            * Input          : %<HRTIM_Name> handler, TIMER id (M to E)
            *******************************************************************************/
            void  HAL_HRTIM_BurstDMATransferCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for Burst DMA Transfer IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-12-Process DMA Interrupts
        %if (ISEQUAL(TIM_IRQ_DMA_ERR, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_DMA_ERR) && (::HRTIM_IRQ_DMA_ERR == TLC_FALSE)
                %assign errTxt = "IRQ_DMA_ERR must be selected and connected to a system only once."
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_DMA_ERR    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_ErrorCallback
            * Description    : %<HRTIM_Name> DMA error event interrupt callback
            * Input          : %<HRTIM_Name> handler
            *******************************************************************************/
            void  HAL_HRTIM_ErrorCallback(HRTIM_HandleTypeDef *hhrtim)
            {
                    %foreach callIdx = NumSFcnSysOutputCalls
                        %if (ISEQUAL(callIdx, %<chOffset>))
                            %if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
                                %assign wrnTxt = "No code will be generated for DMA error IRQ  "\
                                "since it is not connected to a system."
                                %<LibReportWarning(wrnTxt)>
                                %continue
                            %endif
                            %%Is it connected to model including Chart
                            %assign chartIsFound = FunctionCalledAsChart(callIdx)
                            %% call the downstream system
                            %<LibBlockExecuteFcnCall(block, callIdx)>\
                        %endif
                    %endforeach
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%% SET TIMERs M to E interrupt link number %%%
        %%% That will be processed after setting    %%%

        %% TIMER M
        %%-12-Does IRQ UPDM exist
        %if (ISEQUAL(TIM_IRQ_UPDM, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDM_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-13-Does IRQ REPM exist
        %if (ISEQUAL(TIM_IRQ_REPM, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPM_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-14-Does IRQ COMP1 exist
        %if (ISEQUAL(TIM_IRQ_COMP1, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-15-Does IRQ COMP2 exist
        %if (ISEQUAL(TIM_IRQ_COMP2, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-16-Does IRQ COMP3 exist
        %if (ISEQUAL(TIM_IRQ_COMP3, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-17-Does IRQ COMP4 exist
        %if (ISEQUAL(TIM_IRQ_COMP4, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% TIMER A
        %%-18-Does IRQ UPDA exist
        %if (ISEQUAL(TIM_IRQ_UPDA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-19-Does IRQ REPA exist
        %if (ISEQUAL(TIM_IRQ_REPA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-20-Does IRQ COMP1A exist
        %if (ISEQUAL(TIM_IRQ_COMP1A, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1A_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-21-Does IRQ COMP2A exist
        %if (ISEQUAL(TIM_IRQ_COMP2A, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2A_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-22-Does IRQ COMP3A exist
        %if (ISEQUAL(TIM_IRQ_COMP3A, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3A_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-23-Does IRQ COMP4A exist
        %if (ISEQUAL(TIM_IRQ_COMP4A, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4A_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-24-Does IRQ CAPT1A exist
        %if (ISEQUAL(TIM_IRQ_CAPT1A, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT1A_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-25-Does IRQ CAPT2A exist
        %if (ISEQUAL(TIM_IRQ_CAPT2A, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT2A_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-26-Does IRQ DELA exist
        %if (ISEQUAL(TIM_IRQ_DELA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_DELA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-27-Does IRQ RESET_CPTA exist
        %if (ISEQUAL(TIM_IRQ_RESET_CPTA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_RESET_CPTA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-28-Does IRQ OUT1SA exist
        %if (ISEQUAL(TIM_IRQ_OUT1SA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1SA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-29-Does IRQ OUT1RA exist
        %if (ISEQUAL(TIM_IRQ_OUT1RA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1RA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-30-Does IRQ OUT2SA exist
        %if (ISEQUAL(TIM_IRQ_OUT2SA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2SA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-31-Does IRQ OUT2RA exist
        %if (ISEQUAL(TIM_IRQ_OUT2RA, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2RA_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% TIMER B
        %%-32-Does IRQ UPDB exist
        %if (ISEQUAL(TIM_IRQ_UPDB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-33-Does IRQ REPB exist
        %if (ISEQUAL(TIM_IRQ_REPB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-34-Does IRQ COMP1B exist
        %if (ISEQUAL(TIM_IRQ_COMP1B, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1B_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-35-Does IRQ COMP2B exist
        %if (ISEQUAL(TIM_IRQ_COMP2B, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2B_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-36-Does IRQ COMP3B exist
        %if (ISEQUAL(TIM_IRQ_COMP3B, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3B_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-37-Does IRQ COMP4B exist
        %if (ISEQUAL(TIM_IRQ_COMP4B, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4B_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-38-Does IRQ CAPT1B exist
        %if (ISEQUAL(TIM_IRQ_CAPT1B, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT1B_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-39-Does IRQ CAPT2B exist
        %if (ISEQUAL(TIM_IRQ_CAPT2B, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT2B_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-40-Does IRQ DELB exist
        %if (ISEQUAL(TIM_IRQ_DELB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_DELB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-41-Does IRQ RESET_CPTB exist
        %if (ISEQUAL(TIM_IRQ_RESET_CPTB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_RESET_CPTB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-42-Does IRQ OUT1SB exist
        %if (ISEQUAL(TIM_IRQ_OUT1SB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1SB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-43-Does IRQ OUT1RB exist
        %if (ISEQUAL(TIM_IRQ_OUT1RB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1RB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-44-Does IRQ OUT2SB exist
        %if (ISEQUAL(TIM_IRQ_OUT2SB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2SB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-45-Does IRQ OUT2RB exist
        %if (ISEQUAL(TIM_IRQ_OUT2RB, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2RB_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% TIMER C
        %%-46-Does IRQ UPDC exist
        %if (ISEQUAL(TIM_IRQ_UPDC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-47-Does IRQ REPC exist
        %if (ISEQUAL(TIM_IRQ_REPC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-48-Does IRQ COMP1C exist
        %if (ISEQUAL(TIM_IRQ_COMP1C, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1C_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-49-Does IRQ COMP2C exist
        %if (ISEQUAL(TIM_IRQ_COMP2C, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2C_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-50-Does IRQ COMP3C exist
        %if (ISEQUAL(TIM_IRQ_COMP3C, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3C_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-51-Does IRQ COMP4C exist
        %if (ISEQUAL(TIM_IRQ_COMP4C, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4C_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-52-Does IRQ CAPT1C exist
        %if (ISEQUAL(TIM_IRQ_CAPT1C, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT1C_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-53-Does IRQ CAPT2C exist
        %if (ISEQUAL(TIM_IRQ_CAPT2C, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT2C_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-54-Does IRQ DELC exist
        %if (ISEQUAL(TIM_IRQ_DELC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_DELC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-55-Does IRQ RESET_CPTC exist
        %if (ISEQUAL(TIM_IRQ_RESET_CPTC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_RESET_CPTC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-56-Does IRQ OUT1SC exist
        %if (ISEQUAL(TIM_IRQ_OUT1SC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1SC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-57-Does IRQ OUT1RC exist
        %if (ISEQUAL(TIM_IRQ_OUT1RC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1RC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-58-Does IRQ OUT2SC exist
        %if (ISEQUAL(TIM_IRQ_OUT2SC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2SC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-59-Does IRQ OUT2RC exist
        %if (ISEQUAL(TIM_IRQ_OUT2RC, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2RC_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% TIMER D
        %%-60-Does IRQ UPDD exist
        %if (ISEQUAL(TIM_IRQ_UPDD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-61-Does IRQ REPD exist
        %if (ISEQUAL(TIM_IRQ_REPD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-62-Does IRQ COMP1D exist
        %if (ISEQUAL(TIM_IRQ_COMP1D, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1D_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-63-Does IRQ COMP2D exist
        %if (ISEQUAL(TIM_IRQ_COMP2D, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2D_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-64-Does IRQ COMP3D exist
        %if (ISEQUAL(TIM_IRQ_COMP3D, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3D_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-65-Does IRQ COMP4D exist
        %if (ISEQUAL(TIM_IRQ_COMP4D, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4D_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-66-Does IRQ CAPT1D exist
        %if (ISEQUAL(TIM_IRQ_CAPT1D, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT1D_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-67-Does IRQ CAPT2D exist
        %if (ISEQUAL(TIM_IRQ_CAPT2D, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT2D_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-68-Does IRQ DELD exist
        %if (ISEQUAL(TIM_IRQ_DELD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_DELD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-69-Does IRQ RESET_CPTD exist
        %if (ISEQUAL(TIM_IRQ_RESET_CPTD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_RESET_CPTD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-70-Does IRQ OUT1SD exist
        %if (ISEQUAL(TIM_IRQ_OUT1SD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1SD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-71-Does IRQ OUT1RD exist
        %if (ISEQUAL(TIM_IRQ_OUT1RD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1RD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-72-Does IRQ OUT2SD exist
        %if (ISEQUAL(TIM_IRQ_OUT2SD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2SD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-73-Does IRQ OUT2RD exist
        %if (ISEQUAL(TIM_IRQ_OUT2RD, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2RD_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% TIMER E
        %%-74-Does IRQ UPDE exist
        %if (ISEQUAL(TIM_IRQ_UPDE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-75-Does IRQ REPE exist
        %if (ISEQUAL(TIM_IRQ_REPE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-76-Does IRQ COMP1E exist
        %if (ISEQUAL(TIM_IRQ_COMP1E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1E_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-77-Does IRQ COMP2E exist
        %if (ISEQUAL(TIM_IRQ_COMP2E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2E_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-78-Does IRQ COMP3E exist
        %if (ISEQUAL(TIM_IRQ_COMP3E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3E_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-79-Does IRQ COMP4E exist
        %if (ISEQUAL(TIM_IRQ_COMP4E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4E_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-80-Does IRQ CAPT1E exist
        %if (ISEQUAL(TIM_IRQ_CAPT1E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT1E_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-81-Does IRQ CAPT2E exist
        %if (ISEQUAL(TIM_IRQ_CAPT2E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT2E_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-82-Does IRQ DELE exist
        %if (ISEQUAL(TIM_IRQ_DELE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_DELE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-83-Does IRQ RESET_CPTE exist
        %if (ISEQUAL(TIM_IRQ_RESET_CPTE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_RESET_CPTE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-84-Does IRQ OUT1SE exist
        %if (ISEQUAL(TIM_IRQ_OUT1SE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1SE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-85-Does IRQ OUT1RE exist
        %if (ISEQUAL(TIM_IRQ_OUT1RE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1RE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-86-Does IRQ OUT2SE exist
        %if (ISEQUAL(TIM_IRQ_OUT2SE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2SE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-87-Does IRQ OUT2RE exist
        %if (ISEQUAL(TIM_IRQ_OUT2RE, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2RE_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% TIMER F
        %%-88-Does IRQ UPDF exist
        %if (ISEQUAL(TIM_IRQ_UPDF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_UPDF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-89-Does IRQ REPF exist
        %if (ISEQUAL(TIM_IRQ_REPF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_REPF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-90-Does IRQ COMP1F exist
        %if (ISEQUAL(TIM_IRQ_COMP1F, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP1F_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-91-Does IRQ COMP2F exist
        %if (ISEQUAL(TIM_IRQ_COMP2E, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP2F_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-92-Does IRQ COMP3F exist
        %if (ISEQUAL(TIM_IRQ_COMP3F, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP3F_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-93-Does IRQ COMP4F exist
        %if (ISEQUAL(TIM_IRQ_COMP4F, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_COMP4F_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-94-Does IRQ CAPT1F exist
        %if (ISEQUAL(TIM_IRQ_CAPT1F, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT1F_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-95-Does IRQ CAPT2F exist
        %if (ISEQUAL(TIM_IRQ_CAPT2F, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_CAPT2F_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-96-Does IRQ DELF exist
        %if (ISEQUAL(TIM_IRQ_DELF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_DELF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-97-Does IRQ RESET_CPTF exist
        %if (ISEQUAL(TIM_IRQ_RESET_CPTF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_RESET_CPTF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-98-Does IRQ OUT1SF exist
        %if (ISEQUAL(TIM_IRQ_OUT1SF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1SF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-99-Does IRQ OUT1RF exist
        %if (ISEQUAL(TIM_IRQ_OUT1RF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT1RF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-100-Does IRQ OUT2SF exist
        %if (ISEQUAL(TIM_IRQ_OUT2SF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2SF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif
        %%-101-Does IRQ OUT2RF exist
        %if (ISEQUAL(TIM_IRQ_OUT2RF, "on"))
        %%Create dedicated IRQ NUM VAR
        %assign IRQ_OUT2RF_NUM = %<chOffset>
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %% PROCESS INTERRUPTS IF NECESSARY NOW
        %%-Process Update Interrupts
        %if (ISEQUAL(TIM_IRQ_UPDM, "on")||ISEQUAL(TIM_IRQ_UPDA, "on")||ISEQUAL(TIM_IRQ_UPDB, "on")||ISEQUAL(TIM_IRQ_UPDC, "on")||ISEQUAL(TIM_IRQ_UPDD, "on")||ISEQUAL(TIM_IRQ_UPDE, "on")||ISEQUAL(TIM_IRQ_UPDF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_UPD) && (::HRTIM_IRQ_UPD == TLC_FALSE)
                %assign errTxt = "IRQ_UPDM and IRQ_UPDA to IRQ_UPDF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_UPD    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_RegistersUpdateCallback
            * Description    : %<HRTIM_Name> Update event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_MASTER :
                    %if (ISEQUAL(TIM_IRQ_UPDM, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDM_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Master Timer "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDM_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDM_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_UPDA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_UPDB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_UPDC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_UPDD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_UPDE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_UPDF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_UPDF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Update IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_UPDF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_UPDF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Repetition Interrupts
        %if (ISEQUAL(TIM_IRQ_REPM, "on")||ISEQUAL(TIM_IRQ_REPA, "on")||ISEQUAL(TIM_IRQ_REPB, "on")||ISEQUAL(TIM_IRQ_REPC, "on")||ISEQUAL(TIM_IRQ_REPD, "on")||ISEQUAL(TIM_IRQ_REPE, "on")||ISEQUAL(TIM_IRQ_REPF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_REP) && (::HRTIM_IRQ_REP == TLC_FALSE)
                %assign errTxt = "IRQ_REPM and IRQ_REPA to IRQ_REPF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_REP    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_RepetitionEventCallback
            * Description    : %<HRTIM_Name> Repetition event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_MASTER :
                    %if (ISEQUAL(TIM_IRQ_REPM, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPM_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Master Timer "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPM_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPM_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_REPA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_REPB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_REPC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_REPD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_REPE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPE_NUM)>\
                    %endif
                    break;

                    %if (ISEQUAL(TIM_IRQ_REPF, "on"))
                    case HRTIM_TIMERINDEX_TIMER_F :
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_REPF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Repetition IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_REPF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_REPF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Compare1 Interrupts
        %if (ISEQUAL(TIM_IRQ_COMP1, "on")||ISEQUAL(TIM_IRQ_COMP1A, "on")||ISEQUAL(TIM_IRQ_COMP1B, "on")||ISEQUAL(TIM_IRQ_COMP1C, "on")||ISEQUAL(TIM_IRQ_COMP1D, "on")||ISEQUAL(TIM_IRQ_COMP1E, "on")||ISEQUAL(TIM_IRQ_COMP1F, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_COMP1) && (::HRTIM_IRQ_COMP1 == TLC_FALSE)
                %assign errTxt = "IRQ_COMP1M and IRQ_COMP1A to IRQ_COMP1F must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_COMP1    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Compare1EventCallback
            * Description    : %<HRTIM_Name> Compare1 event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_MASTER :
                    %if (ISEQUAL(TIM_IRQ_COMP1, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Master Timer "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_COMP1A, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1A_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1A_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1A_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_COMP1B, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1B_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1B_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1B_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_COMP1C, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1C_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1C_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1C_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_COMP1D, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1D_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1D_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1D_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_COMP1E, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1E_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1E_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1E_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_COMP1F, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP1F_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare1 IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP1F_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP1F_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Compare2 Interrupts
        %if (ISEQUAL(TIM_IRQ_COMP2, "on")||ISEQUAL(TIM_IRQ_COMP2A, "on")||ISEQUAL(TIM_IRQ_COMP2B, "on")||ISEQUAL(TIM_IRQ_COMP2C, "on")||ISEQUAL(TIM_IRQ_COMP2D, "on")||ISEQUAL(TIM_IRQ_COMP2E, "on")||ISEQUAL(TIM_IRQ_COMP2F, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_COMP2) && (::HRTIM_IRQ_COMP2 == TLC_FALSE)
                %assign errTxt = "IRQ_COMP2M and IRQ_COMP2A to IRQ_COMP2F must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_COMP2    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Compare2EventCallback
            * Description    : %<HRTIM_Name> Compare2 event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_MASTER :
                    %if (ISEQUAL(TIM_IRQ_COMP2, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Master Timer "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_COMP2A, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2A_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2A_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2A_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_COMP2B, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2B_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2B_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2B_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_COMP2C, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2C_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2C_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2C_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_COMP2D, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2D_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2D_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2D_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_COMP2E, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2E_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2E_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2E_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_COMP2F, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP2F_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare2 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP2F_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP2F_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Compare3 Interrupts
        %if (ISEQUAL(TIM_IRQ_COMP3, "on")||ISEQUAL(TIM_IRQ_COMP3A, "on")||ISEQUAL(TIM_IRQ_COMP3B, "on")||ISEQUAL(TIM_IRQ_COMP3C, "on")||ISEQUAL(TIM_IRQ_COMP3D, "on")||ISEQUAL(TIM_IRQ_COMP3E, "on")||ISEQUAL(TIM_IRQ_COMP3F, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_COMP3) && (::HRTIM_IRQ_COMP3 == TLC_FALSE)
                %assign errTxt = "IRQ_COMP3M and IRQ_COMP3A to IRQ_COMP3F must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_COMP3    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Compare3EventCallback
            * Description    : %<HRTIM_Name> Compare3 event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_MASTER :
                    %if (ISEQUAL(TIM_IRQ_COMP3, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Master Timer "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_COMP3A, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3A_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3A_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3A_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_COMP3B, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3B_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3B_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3B_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_COMP3C, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3C_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3C_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3C_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_COMP3D, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3D_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3D_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3D_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_COMP3E, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3E_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3E_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3E_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_COMP3F, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP3F_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare3 IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP3F_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP3F_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Compare4 Interrupts
        %if (ISEQUAL(TIM_IRQ_COMP4, "on")||ISEQUAL(TIM_IRQ_COMP4A, "on")||ISEQUAL(TIM_IRQ_COMP4B, "on")||ISEQUAL(TIM_IRQ_COMP4C, "on")||ISEQUAL(TIM_IRQ_COMP4D, "on")||ISEQUAL(TIM_IRQ_COMP4E, "on")||ISEQUAL(TIM_IRQ_COMP4F, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_COMP4) && (::HRTIM_IRQ_COMP4 == TLC_FALSE)
                %assign errTxt = "IRQ_COMP4M and IRQ_COMP4A to IRQ_COMP4F must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_COMP4    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Compare4EventCallback
            * Description    : %<HRTIM_Name> Compare4 event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_MASTER :
                    %if (ISEQUAL(TIM_IRQ_COMP4, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Master Timer "\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_COMP4A, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4A_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4A_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4A_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_COMP4B, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4B_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4B_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4B_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_COMP4C, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4C_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4C_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4C_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_COMP4D, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4D_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4D_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4D_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_COMP4E, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4E_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4E_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4E_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_COMP4F, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_COMP4F_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Compare4 IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_COMP4F_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_COMP4F_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Capture1 Interrupts
        %if (ISEQUAL(TIM_IRQ_CAPT1A, "on")||ISEQUAL(TIM_IRQ_CAPT1B, "on")||ISEQUAL(TIM_IRQ_CAPT1C, "on")||ISEQUAL(TIM_IRQ_CAPT1D, "on")||ISEQUAL(TIM_IRQ_CAPT1E, "on")||ISEQUAL(TIM_IRQ_CAPT1F, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_CAPT1) && (::HRTIM_IRQ_CAPT1 == TLC_FALSE)
                %assign errTxt = "IRQ_CAPT1A to IRQ_CAPT1F must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_CAPT1    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Capture1EventCallback
            * Description    : %<HRTIM_Name> Capture1 event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_CAPT1A, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT1A_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture1 IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT1A_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT1A_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_CAPT1B, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT1B_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture1 IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT1B_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT1B_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_CAPT1C, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT1C_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture1 IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT1C_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT1C_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_CAPT1D, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT1D_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture1 IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT1D_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT1D_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_CAPT1E, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT1E_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture1 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT1E_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT1E_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_CAPT1F, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT1F_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture1 IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT1F_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT1F_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Capture2 Interrupts
        %if (ISEQUAL(TIM_IRQ_CAPT2A, "on")||ISEQUAL(TIM_IRQ_CAPT2B, "on")||ISEQUAL(TIM_IRQ_CAPT2C, "on")||ISEQUAL(TIM_IRQ_CAPT2D, "on")||ISEQUAL(TIM_IRQ_CAPT2E, "on")||ISEQUAL(TIM_IRQ_CAPT2F, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_CAPT2) && (::HRTIM_IRQ_CAPT2 == TLC_FALSE)
                %assign errTxt = "IRQ_CAPT2A to IRQ_CAPT2F must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_CAPT2    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Capture2EventCallback
            * Description    : %<HRTIM_Name> Capture2 event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_CAPT2A, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT2A_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture2 IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT2A_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT2A_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_CAPT2B, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT2B_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture2 IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT2B_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT2B_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_CAPT2C, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT2C_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture2 IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT2C_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT2C_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_CAPT2D, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT2D_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture2 IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT2D_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT2D_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_CAPT2E, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT2E_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture2 IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT2E_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT2E_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_CAPT2F, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_CAPT2F_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Capture2 IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_CAPT2F_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_CAPT2F_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Delayed protection Interrupts
        %if (ISEQUAL(TIM_IRQ_DELA, "on")||ISEQUAL(TIM_IRQ_DELB, "on")||ISEQUAL(TIM_IRQ_DELC, "on")||ISEQUAL(TIM_IRQ_DELD, "on")||ISEQUAL(TIM_IRQ_DELE, "on")||ISEQUAL(TIM_IRQ_DELF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_DEL) && (::HRTIM_IRQ_DEL == TLC_FALSE)
                %assign errTxt = "IRQ_DELA to IRQ_DELF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_DEL    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_DelayedProtectionCallback
            * Description    : %<HRTIM_Name> Delayed protection event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_DELA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_DELA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Delayed protection IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_DELA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_DELA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_DELB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_DELB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Delayed protection IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_DELB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_DELB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_DELC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_DELC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Delayed protection IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_DELC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_DELC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_DELD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_DELD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Delayed protection IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_DELD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_DELD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_DELE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_DELE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Delayed protection IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_DELE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_DELE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_DELF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_DELF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Delayed protection IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_DELF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_DELF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Counter reset Interrupts
        %if (ISEQUAL(TIM_IRQ_RESET_CPTA, "on")||ISEQUAL(TIM_IRQ_RESET_CPTB, "on")||ISEQUAL(TIM_IRQ_RESET_CPTC, "on")||ISEQUAL(TIM_IRQ_RESET_CPTD, "on")||ISEQUAL(TIM_IRQ_RESET_CPTE, "on")||ISEQUAL(TIM_IRQ_RESET_CPTF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_RESET_CPT) && (::HRTIM_IRQ_RESET_CPT == TLC_FALSE)
                %assign errTxt = "IRQ_RESET_CPTA to IRQ_RESET_CPTF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_RESET_CPT    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_CounterResetCallback
            * Description    : %<HRTIM_Name> Counter reset event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_RESET_CPTA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_RESET_CPTA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Counter reset IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_RESET_CPTA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_RESET_CPTA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_RESET_CPTB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_RESET_CPTB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Counter reset IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_RESET_CPTB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_RESET_CPTB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_RESET_CPTC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_RESET_CPTC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Counter reset IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_RESET_CPTC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_RESET_CPTC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_RESET_CPTD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_RESET_CPTD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Counter reset IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_RESET_CPTD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_RESET_CPTD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_RESET_CPTE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_RESET_CPTE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Counter reset IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_RESET_CPTE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_RESET_CPTE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_RESET_CPTF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_RESET_CPTF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Counter reset IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_RESET_CPTF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_RESET_CPTF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Output1Set Interrupts
        %if (ISEQUAL(TIM_IRQ_OUT1SA, "on")||ISEQUAL(TIM_IRQ_OUT1SB, "on")||ISEQUAL(TIM_IRQ_OUT1SC, "on")||ISEQUAL(TIM_IRQ_OUT1SD, "on")||ISEQUAL(TIM_IRQ_OUT1SE, "on")||ISEQUAL(TIM_IRQ_OUT1SF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_OUT1S) && (::HRTIM_IRQ_OUT1S == TLC_FALSE)
                %assign errTxt = "IRQ_OUT1SA to IRQ_OUT1SF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_OUT1S    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Output1SetEventCallback
            * Description    : %<HRTIM_Name> Output1Set event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Output1SetEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_OUT1SA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1SA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Set IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1SA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1SA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_OUT1SB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1SB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Set IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1SB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1SB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_OUT1SC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1SC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Set IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1SC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1SC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_OUT1SD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1SD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Set IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1SD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1SD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_OUT1SE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1SE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Set IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1SE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1SE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_OUT1SF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1SF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Set IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1SF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1SF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Output1Reset Interrupts
        %if (ISEQUAL(TIM_IRQ_OUT1RA, "on")||ISEQUAL(TIM_IRQ_OUT1RB, "on")||ISEQUAL(TIM_IRQ_OUT1RC, "on")||ISEQUAL(TIM_IRQ_OUT1RD, "on")||ISEQUAL(TIM_IRQ_OUT1RE, "on")||ISEQUAL(TIM_IRQ_OUT1RF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_OUT1R) && (::HRTIM_IRQ_OUT1R == TLC_FALSE)
                %assign errTxt = "IRQ_OUT1RA to IRQ_OUT1RF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_OUT1R    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Output1ResetEventCallback
            * Description    : %<HRTIM_Name> Output1Reset event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Output1ResetEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_OUT1RA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1RA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Reset IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1RA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1RA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_OUT1RB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1RB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Reset IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1RB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1RB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_OUT1RC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1RC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Reset IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1RC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1RC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_OUT1RD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1RD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Reset IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1RD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1RD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_OUT1RE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1RE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Reset IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1RE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1RE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_OUT1RF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT1RF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output1Reset IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT1RF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT1RF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Output2Set Interrupts
        %if (ISEQUAL(TIM_IRQ_OUT2SA, "on")||ISEQUAL(TIM_IRQ_OUT2SB, "on")||ISEQUAL(TIM_IRQ_OUT2SC, "on")||ISEQUAL(TIM_IRQ_OUT2SD, "on")||ISEQUAL(TIM_IRQ_OUT2SE, "on")||ISEQUAL(TIM_IRQ_OUT2SF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_OUT2S) && (::HRTIM_IRQ_OUT2S == TLC_FALSE)
                %assign errTxt = "IRQ_OUT2SA to IRQ_OUT2SF must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_OUT2S    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Output2SetEventCallback
            * Description    : %<HRTIM_Name> Output2Set event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Output2SetEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_OUT2SA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2SA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Set IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2SA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2SA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_OUT2SB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2SB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Set IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2SB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2SB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_OUT2SC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2SC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Set IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2SC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2SC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_OUT2SD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2SD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Set IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2SD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2SD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_OUT2SE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2SE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Set IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2SE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2SE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_OUT2SF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2SF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Set IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2SF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2SF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

        %%-Process Output2Reset Interrupts
        %if (ISEQUAL(TIM_IRQ_OUT2RA, "on")||ISEQUAL(TIM_IRQ_OUT2RB, "on")||ISEQUAL(TIM_IRQ_OUT2RC, "on")||ISEQUAL(TIM_IRQ_OUT2RD, "on")||ISEQUAL(TIM_IRQ_OUT2RE, "on")||ISEQUAL(TIM_IRQ_OUT2RF, "on"))
            %%Callback function can be implemented once only
            %if EXISTS(::HRTIM_IRQ_OUT2R) && (::HRTIM_IRQ_OUT2R == TLC_FALSE)
                %assign errTxt = "IRQ_OUT2RA to IRQ_OUT2RE must be selected and connected to a system once only from the same HRTimer Config model"
                %<LibReportError(errTxt)>
            %else
                %assign ::HRTIM_IRQ_OUT2R    = TLC_FALSE
            %endif
            %openfile HRTIM_Buf
            /*******************************************************************************
            * Function Name  : HAL_HRTIM_Output2ResetEventCallback
            * Description    : %<HRTIM_Name> Output2Reset event interrupt callback
            * Input          : %<HRTIM_Name> handler and Timer index (M to F)
            *******************************************************************************/
            void  HAL_HRTIM_Output2ResetEventCallback(HRTIM_HandleTypeDef * hhrtim, uint32_t TimerIdx)
            {
                switch(TimerIdx) {
                    case HRTIM_TIMERINDEX_TIMER_A :
                    %if (ISEQUAL(TIM_IRQ_OUT2RA, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2RA_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Reset IRQ Timer A"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2RA_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2RA_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_B :
                    %if (ISEQUAL(TIM_IRQ_OUT2RB, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2RB_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Reset IRQ Timer B"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2RB_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2RB_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_C :
                    %if (ISEQUAL(TIM_IRQ_OUT2RC, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2RC_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Reset IRQ Timer C"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2RC_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2RC_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_D :
                    %if (ISEQUAL(TIM_IRQ_OUT2RD, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2RD_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Reset IRQ Timer D"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2RD_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2RD_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_E :
                    %if (ISEQUAL(TIM_IRQ_OUT2RE, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2RE_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Reset IRQ Timer E"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2RE_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2RE_NUM)>\
                    %endif
                    break;
                    case HRTIM_TIMERINDEX_TIMER_F :
                    %if (ISEQUAL(TIM_IRQ_OUT2RF, "on"))
                        %if LibIsEqual(SFcnSystemOutputCall[%<IRQ_OUT2RF_NUM>].BlockToCall,"unconnected")
                            %assign wrnTxt = "No code will be generated for Output2Reset IRQ Timer F"\
                            "since it is not connected to a system."
                            %<LibReportWarning(wrnTxt)>
                        %endif
                        %%Is it connected to model including Chart
                        %assign chartIsFound = FunctionCalledAsChart(%<IRQ_OUT2RF_NUM>)
                        %% call the downstream system
                        %<LibBlockExecuteFcnCall(block, IRQ_OUT2RF_NUM)>\
                    %endif
                    break;
                    default :
                    break;
                }
            }
            %closefile HRTIM_Buf
            %if (chartIsFound == 1)
                %<LibSetSourceFileSection(modelC,"Functions",HRTIM_Buf)>
            %else
                %<LibSetSourceFileSection(modelC_HRTIM,"Functions",HRTIM_Buf)>
            %endif
        %%Then inc channel num for next IT connection
        %assign chOffset = %<chOffset> + 1
        %endif

    %endfunction


%% Function: Update ==========================================
%% Abstract:
%% HRTimers input value depending on pin config
%%
%function Update(block, system) Output
    %assign HRTIM_Name = SFcnParamSettings.HRTIM_Name
%%%%%%%%%%%%%%%%%%%%%% HRTIM %%%%%%%%%%%%%%%%%%%%%%%%%
    %assign NbHRTim  = SFcnParamSettings.NbHRTim
    %assign HRTIM_Name = SFcnParamSettings.HRTIM_Name
    %assign HRTIM_Clock = SFcnParamSettings.HRTIM_Clock
    %assign TIM_IRQ_F1 = SFcnParamSettings.TIM_IRQ_F1
    %assign TIM_IRQ_F2 = SFcnParamSettings.TIM_IRQ_F2
    %assign TIM_IRQ_F3 = SFcnParamSettings.TIM_IRQ_F3
    %assign TIM_IRQ_F4 = SFcnParamSettings.TIM_IRQ_F4
    %assign TIM_IRQ_F5 = SFcnParamSettings.TIM_IRQ_F5
    %assign TIM_IRQ_F6 = SFcnParamSettings.TIM_IRQ_F6
    %assign TIM_IRQ_SF = SFcnParamSettings.TIM_IRQ_SF
    %assign TIM_IRQ_BMP = SFcnParamSettings.TIM_IRQ_BMP
    %assign TIM_IRQ_DLLCALL = SFcnParamSettings.TIM_IRQ_DLLCALL
    %assign TIM_IRQ_SYNC = SFcnParamSettings.TIM_IRQ_SYNC
    %assign TIM_IRQ_BURST_DMA = SFcnParamSettings.TIM_IRQ_BURST_DMA
    %assign TIM_IRQ_DMA_ERR = SFcnParamSettings.TIM_IRQ_DMA_ERR
    %assign M_DMA = SFcnParamSettings.M_DMA
    %assign M_IT_global = SFcnParamSettings.M_IT_global
    %assign M_Tim_div = SFcnParamSettings.M_Tim_div
    %assign M_Period = SFcnParamSettings.M_Period
    %assign M_PWM_Period = SFcnParamSettings.M_PWM_Period
    %assign M_Unit1 = SFcnParamSettings.M_Unit1
    %assign M_Unit2 = SFcnParamSettings.M_Unit2
    %assign M_Unit3 = SFcnParamSettings.M_Unit3
    %assign M_Unit4 = SFcnParamSettings.M_Unit4
    %assign TIM_IRQ_UPDM = SFcnParamSettings.TIM_IRQ_UPDM
    %assign TIM_IRQ_REPM = SFcnParamSettings.TIM_IRQ_REPM
    %assign TIM_IRQ_COMP1 = SFcnParamSettings.TIM_IRQ_COMP1
    %assign TIM_IRQ_COMP2 = SFcnParamSettings.TIM_IRQ_COMP2
    %assign TIM_IRQ_COMP3 = SFcnParamSettings.TIM_IRQ_COMP3
    %assign TIM_IRQ_COMP4 = SFcnParamSettings.TIM_IRQ_COMP4
    %assign A_Mode = SFcnParamSettings.A_Mode
    %assign A_DMA = SFcnParamSettings.A_DMA
    %assign A_IT_global = SFcnParamSettings.A_IT_global
    %assign A_Tim_div = SFcnParamSettings.A_Tim_div
    %assign A_Period = SFcnParamSettings.A_Period
    %assign A_PWM_Period = SFcnParamSettings.A_PWM_Period
    %assign A_Capture1 = SFcnParamSettings.A_Capture1
    %assign A_Capture2 = SFcnParamSettings.A_Capture2
    %assign TA1_Enable = SFcnParamSettings.TA1_Enable
    %assign TA1_Polarity = SFcnParamSettings.TA1_Polarity
    %assign TA1_Chopper = SFcnParamSettings.TA1_Chopper
    %assign TA2_Enable = SFcnParamSettings.TA2_Enable
    %assign TA2_Polarity = SFcnParamSettings.TA2_Polarity
    %assign TA2_Chopper = SFcnParamSettings.TA2_Chopper
    %assign A_Unit1 = SFcnParamSettings.A_Unit1
    %assign A_Unit2 = SFcnParamSettings.A_Unit2
    %assign A_Unit3 = SFcnParamSettings.A_Unit3
    %assign A_Unit4 = SFcnParamSettings.A_Unit4
    %assign A_Output_Comp1 = SFcnParamSettings.A_Output_Comp1
    %assign A_Comp_Polarity1 = SFcnParamSettings.A_Comp_Polarity1
    %assign A_CompVal1 = SFcnParamSettings.A_CompVal1
    %assign A_Output_Comp2 = SFcnParamSettings.A_Output_Comp2
    %assign A_Comp_Polarity2 = SFcnParamSettings.A_Comp_Polarity2
    %assign A_CompVal2 = SFcnParamSettings.A_CompVal2
    %assign A_Output_PWM1 = SFcnParamSettings.A_Output_PWM1
    %assign A_Output_Polarity1 = SFcnParamSettings.A_Output_Polarity1
    %assign A_DutyVal1 = SFcnParamSettings.A_DutyVal1
    %assign A_DutyIn1 = SFcnParamSettings.A_DutyIn1
    %assign A_Output_PWM2 = SFcnParamSettings.A_Output_PWM2
    %assign A_Output_Polarity2 = SFcnParamSettings.A_Output_Polarity2
    %assign A_DutyVal2 = SFcnParamSettings.A_DutyVal2
    %assign A_DutyIn2 = SFcnParamSettings.A_DutyIn2
    %assign A_OnePulse1 = SFcnParamSettings.A_OnePulse1
    %assign A_OnePulse_Polarity1 = SFcnParamSettings.A_OnePulse_Polarity1
    %assign A_OnePulse_CompVal1 = SFcnParamSettings.A_OnePulse_CompVal1
    %assign A_OnePulse2 = SFcnParamSettings.A_OnePulse2
    %assign A_OnePulse_Polarity2 = SFcnParamSettings.A_OnePulse_Polarity2
    %assign A_OnePulse_CompVal2 = SFcnParamSettings.A_OnePulse_CompVal2
    %assign TIM_IRQ_UPDA = SFcnParamSettings.TIM_IRQ_UPDA
    %assign TIM_IRQ_REPA = SFcnParamSettings.TIM_IRQ_REPA
    %assign TIM_IRQ_COMP1A = SFcnParamSettings.TIM_IRQ_COMP1A
    %assign TIM_IRQ_COMP2A = SFcnParamSettings.TIM_IRQ_COMP2A
    %assign TIM_IRQ_COMP3A = SFcnParamSettings.TIM_IRQ_COMP3A
    %assign TIM_IRQ_COMP4A = SFcnParamSettings.TIM_IRQ_COMP4A
    %assign TIM_IRQ_CAPT1A = SFcnParamSettings.TIM_IRQ_CAPT1A
    %assign TIM_IRQ_CAPT2A = SFcnParamSettings.TIM_IRQ_CAPT2A
    %assign TIM_IRQ_DELA = SFcnParamSettings.TIM_IRQ_DELA
    %assign TIM_IRQ_RESET_CPTA = SFcnParamSettings.TIM_IRQ_RESET_CPTA
    %assign TIM_IRQ_OUT1SA = SFcnParamSettings.TIM_IRQ_OUT1SA
    %assign TIM_IRQ_OUT1RA = SFcnParamSettings.TIM_IRQ_OUT1RA
    %assign TIM_IRQ_OUT2SA = SFcnParamSettings.TIM_IRQ_OUT2SA
    %assign TIM_IRQ_OUT2RA = SFcnParamSettings.TIM_IRQ_OUT2RA
    %assign B_Mode = SFcnParamSettings.B_Mode
    %assign B_DMA = SFcnParamSettings.B_DMA
    %assign B_IT_global = SFcnParamSettings.B_IT_global
    %assign B_Tim_div = SFcnParamSettings.B_Tim_div
    %assign B_Period = SFcnParamSettings.B_Period
    %assign B_PWM_Period = SFcnParamSettings.B_PWM_Period
    %assign B_Capture1 = SFcnParamSettings.B_Capture1
    %assign B_Capture2 = SFcnParamSettings.B_Capture2
    %assign TB1_Enable = SFcnParamSettings.TB1_Enable
    %assign TB1_Polarity = SFcnParamSettings.TB1_Polarity
    %assign TB1_Chopper = SFcnParamSettings.TB1_Chopper
    %assign TB2_Enable = SFcnParamSettings.TB2_Enable
    %assign TB2_Polarity = SFcnParamSettings.TB2_Polarity
    %assign TB2_Chopper = SFcnParamSettings.TB2_Chopper
    %assign B_Unit1 = SFcnParamSettings.B_Unit1
    %assign B_Unit2 = SFcnParamSettings.B_Unit2
    %assign B_Unit3 = SFcnParamSettings.B_Unit3
    %assign B_Unit4 = SFcnParamSettings.B_Unit4
    %assign B_Output_Comp1 = SFcnParamSettings.B_Output_Comp1
    %assign B_Comp_Polarity1 = SFcnParamSettings.B_Comp_Polarity1
    %assign B_CompVal1 = SFcnParamSettings.B_CompVal1
    %assign B_Output_Comp2 = SFcnParamSettings.B_Output_Comp2
    %assign B_Comp_Polarity2 = SFcnParamSettings.B_Comp_Polarity2
    %assign B_CompVal2 = SFcnParamSettings.B_CompVal2
    %assign B_Output_PWM1 = SFcnParamSettings.B_Output_PWM1
    %assign B_Output_Polarity1 = SFcnParamSettings.B_Output_Polarity1
    %assign B_DutyVal1 = SFcnParamSettings.B_DutyVal1
    %assign B_DutyIn1 = SFcnParamSettings.B_DutyIn1
    %assign B_Output_PWM2 = SFcnParamSettings.B_Output_PWM2
    %assign B_Output_Polarity2 = SFcnParamSettings.B_Output_Polarity2
    %assign B_DutyVal2 = SFcnParamSettings.B_DutyVal2
    %assign B_DutyIn2 = SFcnParamSettings.B_DutyIn2
    %assign B_OnePulse1 = SFcnParamSettings.B_OnePulse1
    %assign B_OnePulse_Polarity1 = SFcnParamSettings.B_OnePulse_Polarity1
    %assign B_OnePulse_CompVal1 = SFcnParamSettings.B_OnePulse_CompVal1
    %assign B_OnePulse2 = SFcnParamSettings.B_OnePulse2
    %assign B_OnePulse_Polarity2 = SFcnParamSettings.B_OnePulse_Polarity2
    %assign B_OnePulse_CompVal2 = SFcnParamSettings.B_OnePulse_CompVal2
    %assign TIM_IRQ_UPDB = SFcnParamSettings.TIM_IRQ_UPDB
    %assign TIM_IRQ_REPB = SFcnParamSettings.TIM_IRQ_REPB
    %assign TIM_IRQ_COMP1B = SFcnParamSettings.TIM_IRQ_COMP1B
    %assign TIM_IRQ_COMP2B = SFcnParamSettings.TIM_IRQ_COMP2B
    %assign TIM_IRQ_COMP3B = SFcnParamSettings.TIM_IRQ_COMP3B
    %assign TIM_IRQ_COMP4B = SFcnParamSettings.TIM_IRQ_COMP4B
    %assign TIM_IRQ_CAPT1B = SFcnParamSettings.TIM_IRQ_CAPT1B
    %assign TIM_IRQ_CAPT2B = SFcnParamSettings.TIM_IRQ_CAPT2B
    %assign TIM_IRQ_DELB = SFcnParamSettings.TIM_IRQ_DELB
    %assign TIM_IRQ_RESET_CPTB = SFcnParamSettings.TIM_IRQ_RESET_CPTB
    %assign TIM_IRQ_OUT1SB = SFcnParamSettings.TIM_IRQ_OUT1SB
    %assign TIM_IRQ_OUT1RB = SFcnParamSettings.TIM_IRQ_OUT1RB
    %assign TIM_IRQ_OUT2SB = SFcnParamSettings.TIM_IRQ_OUT2SB
    %assign TIM_IRQ_OUT2RB = SFcnParamSettings.TIM_IRQ_OUT2RB
    %assign C_Mode = SFcnParamSettings.C_Mode
    %assign C_DMA = SFcnParamSettings.C_DMA
    %assign C_IT_global = SFcnParamSettings.C_IT_global
    %assign C_Tim_div = SFcnParamSettings.C_Tim_div
    %assign C_Period = SFcnParamSettings.C_Period
    %assign C_PWM_Period = SFcnParamSettings.C_PWM_Period
    %assign C_Capture1 = SFcnParamSettings.C_Capture1
    %assign C_Capture2 = SFcnParamSettings.C_Capture2
    %assign TC1_Enable = SFcnParamSettings.TC1_Enable
    %assign TC1_Polarity = SFcnParamSettings.TC1_Polarity
    %assign TC1_Chopper = SFcnParamSettings.TC1_Chopper
    %assign TC2_Enable = SFcnParamSettings.TC2_Enable
    %assign TC2_Polarity = SFcnParamSettings.TC2_Polarity
    %assign TC2_Chopper = SFcnParamSettings.TC2_Chopper
    %assign C_Unit1 = SFcnParamSettings.C_Unit1
    %assign C_Unit2 = SFcnParamSettings.C_Unit2
    %assign C_Unit3 = SFcnParamSettings.C_Unit3
    %assign C_Unit4 = SFcnParamSettings.C_Unit4
    %assign C_Output_Comp1 = SFcnParamSettings.C_Output_Comp1
    %assign C_Comp_Polarity1 = SFcnParamSettings.C_Comp_Polarity1
    %assign C_CompVal1 = SFcnParamSettings.C_CompVal1
    %assign C_Output_Comp2 = SFcnParamSettings.C_Output_Comp2
    %assign C_Comp_Polarity2 = SFcnParamSettings.C_Comp_Polarity2
    %assign C_CompVal2 = SFcnParamSettings.C_CompVal2
    %assign C_Output_PWM1 = SFcnParamSettings.C_Output_PWM1
    %assign C_Output_Polarity1 = SFcnParamSettings.C_Output_Polarity1
    %assign C_DutyVal1 = SFcnParamSettings.C_DutyVal1
    %assign C_DutyIn1 = SFcnParamSettings.C_DutyIn1
    %assign C_Output_PWM2 = SFcnParamSettings.C_Output_PWM2
    %assign C_Output_Polarity2 = SFcnParamSettings.C_Output_Polarity2
    %assign C_DutyVal2 = SFcnParamSettings.C_DutyVal2
    %assign C_DutyIn2 = SFcnParamSettings.C_DutyIn2
    %assign C_OnePulse1 = SFcnParamSettings.C_OnePulse1
    %assign C_OnePulse_Polarity1 = SFcnParamSettings.C_OnePulse_Polarity1
    %assign C_OnePulse_CompVal1 = SFcnParamSettings.C_OnePulse_CompVal1
    %assign C_OnePulse2 = SFcnParamSettings.C_OnePulse2
    %assign C_OnePulse_Polarity2 = SFcnParamSettings.C_OnePulse_Polarity2
    %assign C_OnePulse_CompVal2 = SFcnParamSettings.C_OnePulse_CompVal2
    %assign TIM_IRQ_UPDC = SFcnParamSettings.TIM_IRQ_UPDC
    %assign TIM_IRQ_REPC = SFcnParamSettings.TIM_IRQ_REPC
    %assign TIM_IRQ_COMP1C = SFcnParamSettings.TIM_IRQ_COMP1C
    %assign TIM_IRQ_COMP2C = SFcnParamSettings.TIM_IRQ_COMP2C
    %assign TIM_IRQ_COMP3C = SFcnParamSettings.TIM_IRQ_COMP3C
    %assign TIM_IRQ_COMP4C = SFcnParamSettings.TIM_IRQ_COMP4C
    %assign TIM_IRQ_CAPT1C = SFcnParamSettings.TIM_IRQ_CAPT1C
    %assign TIM_IRQ_CAPT2C = SFcnParamSettings.TIM_IRQ_CAPT2C
    %assign TIM_IRQ_DELC = SFcnParamSettings.TIM_IRQ_DELC
    %assign TIM_IRQ_RESET_CPTC = SFcnParamSettings.TIM_IRQ_RESET_CPTC
    %assign TIM_IRQ_OUT1SC = SFcnParamSettings.TIM_IRQ_OUT1SC
    %assign TIM_IRQ_OUT1RC = SFcnParamSettings.TIM_IRQ_OUT1RC
    %assign TIM_IRQ_OUT2SC = SFcnParamSettings.TIM_IRQ_OUT2SC
    %assign TIM_IRQ_OUT2RC = SFcnParamSettings.TIM_IRQ_OUT2RC
    %assign D_Mode = SFcnParamSettings.D_Mode
    %assign D_DMA = SFcnParamSettings.D_DMA
    %assign D_IT_global = SFcnParamSettings.D_IT_global
    %assign D_Tim_div = SFcnParamSettings.D_Tim_div
    %assign D_Period = SFcnParamSettings.D_Period
    %assign D_PWM_Period = SFcnParamSettings.D_PWM_Period
    %assign D_Capture1 = SFcnParamSettings.D_Capture1
    %assign D_Capture2 = SFcnParamSettings.D_Capture2
    %assign TD1_Enable = SFcnParamSettings.TD1_Enable
    %assign TD1_Polarity = SFcnParamSettings.TD1_Polarity
    %assign TD1_Chopper = SFcnParamSettings.TD1_Chopper
    %assign TD2_Enable = SFcnParamSettings.TD2_Enable
    %assign TD2_Polarity = SFcnParamSettings.TD2_Polarity
    %assign TD2_Chopper = SFcnParamSettings.TD2_Chopper
    %assign D_Unit1 = SFcnParamSettings.D_Unit1
    %assign D_Unit2 = SFcnParamSettings.D_Unit2
    %assign D_Unit3 = SFcnParamSettings.D_Unit3
    %assign D_Unit4 = SFcnParamSettings.D_Unit4
    %assign D_Output_Comp1 = SFcnParamSettings.D_Output_Comp1
    %assign D_Comp_Polarity1 = SFcnParamSettings.D_Comp_Polarity1
    %assign D_CompVal1 = SFcnParamSettings.D_CompVal1
    %assign D_Output_Comp2 = SFcnParamSettings.D_Output_Comp2
    %assign D_Comp_Polarity2 = SFcnParamSettings.D_Comp_Polarity2
    %assign D_CompVal2 = SFcnParamSettings.D_CompVal2
    %assign D_Output_PWM1 = SFcnParamSettings.D_Output_PWM1
    %assign D_Output_Polarity1 = SFcnParamSettings.D_Output_Polarity1
    %assign D_DutyVal1 = SFcnParamSettings.D_DutyVal1
    %assign D_DutyIn1 = SFcnParamSettings.D_DutyIn1
    %assign D_Output_PWM2 = SFcnParamSettings.D_Output_PWM2
    %assign D_Output_Polarity2 = SFcnParamSettings.D_Output_Polarity2
    %assign D_DutyVal2 = SFcnParamSettings.D_DutyVal2
    %assign D_DutyIn2 = SFcnParamSettings.D_DutyIn2
    %assign D_OnePulse1 = SFcnParamSettings.D_OnePulse1
    %assign D_OnePulse_Polarity1 = SFcnParamSettings.D_OnePulse_Polarity1
    %assign D_OnePulse_CompVal1 = SFcnParamSettings.D_OnePulse_CompVal1
    %assign D_OnePulse2 = SFcnParamSettings.D_OnePulse2
    %assign D_OnePulse_Polarity2 = SFcnParamSettings.D_OnePulse_Polarity2
    %assign D_OnePulse_CompVal2 = SFcnParamSettings.D_OnePulse_CompVal2
    %assign TIM_IRQ_UPDD = SFcnParamSettings.TIM_IRQ_UPDD
    %assign TIM_IRQ_REPD = SFcnParamSettings.TIM_IRQ_REPD
    %assign TIM_IRQ_COMP1D = SFcnParamSettings.TIM_IRQ_COMP1D
    %assign TIM_IRQ_COMP2D = SFcnParamSettings.TIM_IRQ_COMP2D
    %assign TIM_IRQ_COMP3D = SFcnParamSettings.TIM_IRQ_COMP3D
    %assign TIM_IRQ_COMP4D = SFcnParamSettings.TIM_IRQ_COMP4D
    %assign TIM_IRQ_CAPT1D = SFcnParamSettings.TIM_IRQ_CAPT1D
    %assign TIM_IRQ_CAPT2D = SFcnParamSettings.TIM_IRQ_CAPT2D
    %assign TIM_IRQ_DELD = SFcnParamSettings.TIM_IRQ_DELD
    %assign TIM_IRQ_RESET_CPTD = SFcnParamSettings.TIM_IRQ_RESET_CPTD
    %assign TIM_IRQ_OUT1SD = SFcnParamSettings.TIM_IRQ_OUT1SD
    %assign TIM_IRQ_OUT1RD = SFcnParamSettings.TIM_IRQ_OUT1RD
    %assign TIM_IRQ_OUT2SD = SFcnParamSettings.TIM_IRQ_OUT2SD
    %assign TIM_IRQ_OUT2RD = SFcnParamSettings.TIM_IRQ_OUT2RD
    %assign E_Mode = SFcnParamSettings.E_Mode
    %assign E_DMA = SFcnParamSettings.E_DMA
    %assign E_IT_global = SFcnParamSettings.E_IT_global
    %assign E_Tim_div = SFcnParamSettings.E_Tim_div
    %assign E_Period = SFcnParamSettings.E_Period
    %assign E_PWM_Period = SFcnParamSettings.E_PWM_Period
    %assign E_Capture1 = SFcnParamSettings.E_Capture1
    %assign E_Capture2 = SFcnParamSettings.E_Capture2
    %assign TE1_Enable = SFcnParamSettings.TE1_Enable
    %assign TE1_Polarity = SFcnParamSettings.TE1_Polarity
    %assign TE1_Chopper = SFcnParamSettings.TE1_Chopper
    %assign TE2_Enable = SFcnParamSettings.TE2_Enable
    %assign TE2_Polarity = SFcnParamSettings.TE2_Polarity
    %assign TE2_Chopper = SFcnParamSettings.TE2_Chopper
    %assign E_Unit1 = SFcnParamSettings.E_Unit1
    %assign E_Unit2 = SFcnParamSettings.E_Unit2
    %assign E_Unit3 = SFcnParamSettings.E_Unit3
    %assign E_Unit4 = SFcnParamSettings.E_Unit4
    %assign E_Output_Comp1 = SFcnParamSettings.E_Output_Comp1
    %assign E_Comp_Polarity1 = SFcnParamSettings.E_Comp_Polarity1
    %assign E_CompVal1 = SFcnParamSettings.E_CompVal1
    %assign E_Output_Comp2 = SFcnParamSettings.E_Output_Comp2
    %assign E_Comp_Polarity2 = SFcnParamSettings.E_Comp_Polarity2
    %assign E_CompVal2 = SFcnParamSettings.E_CompVal2
    %assign E_Output_PWM1 = SFcnParamSettings.E_Output_PWM1
    %assign E_Output_Polarity1 = SFcnParamSettings.E_Output_Polarity1
    %assign E_DutyVal1 = SFcnParamSettings.E_DutyVal1
    %assign E_DutyIn1 = SFcnParamSettings.E_DutyIn1
    %assign E_Output_PWM2 = SFcnParamSettings.E_Output_PWM2
    %assign E_Output_Polarity2 = SFcnParamSettings.E_Output_Polarity2
    %assign E_DutyVal2 = SFcnParamSettings.E_DutyVal2
    %assign E_DutyIn2 = SFcnParamSettings.E_DutyIn2
    %assign E_OnePulse1 = SFcnParamSettings.E_OnePulse1
    %assign E_OnePulse_Polarity1 = SFcnParamSettings.E_OnePulse_Polarity1
    %assign E_OnePulse_CompVal1 = SFcnParamSettings.E_OnePulse_CompVal1
    %assign E_OnePulse2 = SFcnParamSettings.E_OnePulse2
    %assign E_OnePulse_Polarity2 = SFcnParamSettings.E_OnePulse_Polarity2
    %assign E_OnePulse_CompVal2 = SFcnParamSettings.E_OnePulse_CompVal2
    %assign TIM_IRQ_UPDE = SFcnParamSettings.TIM_IRQ_UPDE
    %assign TIM_IRQ_REPE = SFcnParamSettings.TIM_IRQ_REPE
    %assign TIM_IRQ_COMP1E = SFcnParamSettings.TIM_IRQ_COMP1E
    %assign TIM_IRQ_COMP2E = SFcnParamSettings.TIM_IRQ_COMP2E
    %assign TIM_IRQ_COMP3E = SFcnParamSettings.TIM_IRQ_COMP3E
    %assign TIM_IRQ_COMP4E = SFcnParamSettings.TIM_IRQ_COMP4E
    %assign TIM_IRQ_CAPT1E = SFcnParamSettings.TIM_IRQ_CAPT1E
    %assign TIM_IRQ_CAPT2E = SFcnParamSettings.TIM_IRQ_CAPT2E
    %assign TIM_IRQ_DELE = SFcnParamSettings.TIM_IRQ_DELE
    %assign TIM_IRQ_RESET_CPTE = SFcnParamSettings.TIM_IRQ_RESET_CPTE
    %assign TIM_IRQ_OUT1SE = SFcnParamSettings.TIM_IRQ_OUT1SE
    %assign TIM_IRQ_OUT1RE = SFcnParamSettings.TIM_IRQ_OUT1RE
    %assign TIM_IRQ_OUT2SE = SFcnParamSettings.TIM_IRQ_OUT2SE
    %assign TIM_IRQ_OUT2RE = SFcnParamSettings.TIM_IRQ_OUT2RE
    %assign F_Mode = SFcnParamSettings.F_Mode
    %assign F_DMA = SFcnParamSettings.F_DMA
    %assign F_IT_global = SFcnParamSettings.F_IT_global
    %assign F_Tim_div = SFcnParamSettings.F_Tim_div
    %assign F_Period = SFcnParamSettings.F_Period
    %assign F_PWM_Period = SFcnParamSettings.F_PWM_Period
    %assign F_Capture1 = SFcnParamSettings.F_Capture1
    %assign F_Capture2 = SFcnParamSettings.F_Capture2
    %assign TF1_Enable = SFcnParamSettings.TF1_Enable
    %assign TF1_Polarity = SFcnParamSettings.TF1_Polarity
    %assign TF1_Chopper = SFcnParamSettings.TF1_Chopper
    %assign TF2_Enable = SFcnParamSettings.TF2_Enable
    %assign TF2_Polarity = SFcnParamSettings.TF2_Polarity
    %assign TF2_Chopper = SFcnParamSettings.TF2_Chopper
    %assign F_Unit1 = SFcnParamSettings.F_Unit1
    %assign F_Unit2 = SFcnParamSettings.F_Unit2
    %assign F_Unit3 = SFcnParamSettings.F_Unit3
    %assign F_Unit4 = SFcnParamSettings.F_Unit4
    %assign F_Output_Comp1 = SFcnParamSettings.F_Output_Comp1
    %assign F_Comp_Polarity1 = SFcnParamSettings.F_Comp_Polarity1
    %assign F_CompVal1 = SFcnParamSettings.F_CompVal1
    %assign F_Output_Comp2 = SFcnParamSettings.F_Output_Comp2
    %assign F_Comp_Polarity2 = SFcnParamSettings.F_Comp_Polarity2
    %assign F_CompVal2 = SFcnParamSettings.F_CompVal2
    %assign F_Output_PWM1 = SFcnParamSettings.F_Output_PWM1
    %assign F_Output_Polarity1 = SFcnParamSettings.F_Output_Polarity1
    %assign F_DutyVal1 = SFcnParamSettings.F_DutyVal1
    %assign F_DutyIn1 = SFcnParamSettings.F_DutyIn1
    %assign F_Output_PWM2 = SFcnParamSettings.F_Output_PWM2
    %assign F_Output_Polarity2 = SFcnParamSettings.F_Output_Polarity2
    %assign F_DutyVal2 = SFcnParamSettings.F_DutyVal2
    %assign F_DutyIn2 = SFcnParamSettings.F_DutyIn2
    %assign F_OnePulse1 = SFcnParamSettings.F_OnePulse1
    %assign F_OnePulse_Polarity1 = SFcnParamSettings.F_OnePulse_Polarity1
    %assign F_OnePulse_CompVal1 = SFcnParamSettings.F_OnePulse_CompVal1
    %assign F_OnePulse2 = SFcnParamSettings.F_OnePulse2
    %assign F_OnePulse_Polarity2 = SFcnParamSettings.F_OnePulse_Polarity2
    %assign F_OnePulse_CompVal2 = SFcnParamSettings.F_OnePulse_CompVal2
    %assign TIM_IRQ_UPDF = SFcnParamSettings.TIM_IRQ_UPDF
    %assign TIM_IRQ_REPF = SFcnParamSettings.TIM_IRQ_REPF
    %assign TIM_IRQ_COMP1F = SFcnParamSettings.TIM_IRQ_COMP1F
    %assign TIM_IRQ_COMP2F = SFcnParamSettings.TIM_IRQ_COMP2F
    %assign TIM_IRQ_COMP3F = SFcnParamSettings.TIM_IRQ_COMP3F
    %assign TIM_IRQ_COMP4F = SFcnParamSettings.TIM_IRQ_COMP4F
    %assign TIM_IRQ_CAPT1F = SFcnParamSettings.TIM_IRQ_CAPT1F
    %assign TIM_IRQ_CAPT2F = SFcnParamSettings.TIM_IRQ_CAPT2F
    %assign TIM_IRQ_DELF = SFcnParamSettings.TIM_IRQ_DELF
    %assign TIM_IRQ_RESET_CPTF = SFcnParamSettings.TIM_IRQ_RESET_CPTF
    %assign TIM_IRQ_OUT1SF = SFcnParamSettings.TIM_IRQ_OUT1SF
    %assign TIM_IRQ_OUT1RF = SFcnParamSettings.TIM_IRQ_OUT1RF
    %assign TIM_IRQ_OUT2SF = SFcnParamSettings.TIM_IRQ_OUT2SF
    %assign TIM_IRQ_OUT2RF = SFcnParamSettings.TIM_IRQ_OUT2RF
    %assign M_Used = SFcnParamSettings.M_Used
    %assign A_Used = SFcnParamSettings.A_Used
    %assign B_Used = SFcnParamSettings.B_Used
    %assign C_Used = SFcnParamSettings.C_Used
    %assign D_Used = SFcnParamSettings.D_Used
    %assign E_Used = SFcnParamSettings.E_Used
    %assign F_Used = SFcnParamSettings.F_Used

    %assign timNum = IDNUM("%<HRTIM_Name>")[1]
    %assign InputNum = 0

        %%At least one interrupt
        %if (ISEQUAL(TIM_IRQ_F1,"on")||ISEQUAL(TIM_IRQ_F2,"on")||ISEQUAL(TIM_IRQ_F3,"on")||ISEQUAL(TIM_IRQ_F4,"on")||ISEQUAL(TIM_IRQ_F5,"on")||ISEQUAL(TIM_IRQ_F6,"on")||ISEQUAL(TIM_IRQ_SF,"on")||...
        ISEQUAL(TIM_IRQ_BMP,"on")||ISEQUAL(TIM_IRQ_DLLCALL,"on")||ISEQUAL(TIM_IRQ_SYNC,"on")||ISEQUAL(TIM_IRQ_BURST_DMA,"on")||ISEQUAL(TIM_IRQ_DMA_ERR,"on")||...
        ISEQUAL(TIM_IRQ_UPDM,"on")||ISEQUAL(TIM_IRQ_REPM,"on")||ISEQUAL(TIM_IRQ_COMP1,"on")||ISEQUAL(TIM_IRQ_COMP2,"on")||ISEQUAL(TIM_IRQ_COMP3,"on")||ISEQUAL(TIM_IRQ_COMP4,"on")||...
        ISEQUAL(TIM_IRQ_UPDA,"on")||ISEQUAL(TIM_IRQ_REPA,"on")||ISEQUAL(TIM_IRQ_COMP1A,"on")||ISEQUAL(TIM_IRQ_COMP2A,"on")||ISEQUAL(TIM_IRQ_COMP3A,"on")||ISEQUAL(TIM_IRQ_COMP4A,"on")||...
        ISEQUAL(TIM_IRQ_CAPT1A,"on")||ISEQUAL(TIM_IRQ_CAPT2A,"on")||ISEQUAL(TIM_IRQ_DELA,"on")||ISEQUAL(TIM_IRQ_RESET_CPTA,"on")||ISEQUAL(TIM_IRQ_OUT1SA,"on")||ISEQUAL(TIM_IRQ_OUT1RA,"on")||ISEQUAL(TIM_IRQ_OUT2SA,"on")||ISEQUAL(TIM_IRQ_OUT2RA,"on")||...
        ISEQUAL(TIM_IRQ_UPDB,"on")||ISEQUAL(TIM_IRQ_REPB,"on")||ISEQUAL(TIM_IRQ_COMP1B,"on")||ISEQUAL(TIM_IRQ_COMP2B,"on")||ISEQUAL(TIM_IRQ_COMP3B,"on")||ISEQUAL(TIM_IRQ_COMP4B,"on")||...
        ISEQUAL(TIM_IRQ_CAPT1B,"on")||ISEQUAL(TIM_IRQ_CAPT2B,"on")||ISEQUAL(TIM_IRQ_DELB,"on")||ISEQUAL(TIM_IRQ_RESET_CPTB,"on")||ISEQUAL(TIM_IRQ_OUT1SB,"on")||ISEQUAL(TIM_IRQ_OUT1RB,"on")||ISEQUAL(TIM_IRQ_OUT2SB,"on")||ISEQUAL(TIM_IRQ_OUT2RB,"on")||...
        ISEQUAL(TIM_IRQ_UPDC,"on")||ISEQUAL(TIM_IRQ_REPC,"on")||ISEQUAL(TIM_IRQ_COMP1C,"on")||ISEQUAL(TIM_IRQ_COMP2C,"on")||ISEQUAL(TIM_IRQ_COMP3C,"on")||ISEQUAL(TIM_IRQ_COMP4C,"on")||...
        ISEQUAL(TIM_IRQ_CAPT1C,"on")||ISEQUAL(TIM_IRQ_CAPT2C,"on")||ISEQUAL(TIM_IRQ_DELC,"on")||ISEQUAL(TIM_IRQ_RESET_CPTC,"on")||ISEQUAL(TIM_IRQ_OUT1SC,"on")||ISEQUAL(TIM_IRQ_OUT1RC,"on")||ISEQUAL(TIM_IRQ_OUT2SC,"on")||ISEQUAL(TIM_IRQ_OUT2RC,"on")||...
        ISEQUAL(TIM_IRQ_UPDD,"on")||ISEQUAL(TIM_IRQ_REPD,"on")||ISEQUAL(TIM_IRQ_COMP1D,"on")||ISEQUAL(TIM_IRQ_COMP2D,"on")||ISEQUAL(TIM_IRQ_COMP3D,"on")||ISEQUAL(TIM_IRQ_COMP4D,"on")||...
        ISEQUAL(TIM_IRQ_CAPT1D,"on")||ISEQUAL(TIM_IRQ_CAPT2D,"on")||ISEQUAL(TIM_IRQ_DELD,"on")||ISEQUAL(TIM_IRQ_RESET_CPTD,"on")||ISEQUAL(TIM_IRQ_OUT1SD,"on")||ISEQUAL(TIM_IRQ_OUT1RD,"on")||ISEQUAL(TIM_IRQ_OUT2SD,"on")||ISEQUAL(TIM_IRQ_OUT2RD,"on")||...
        ISEQUAL(TIM_IRQ_UPDE,"on")||ISEQUAL(TIM_IRQ_REPE,"on")||ISEQUAL(TIM_IRQ_COMP1E,"on")||ISEQUAL(TIM_IRQ_COMP2E,"on")||ISEQUAL(TIM_IRQ_COMP3E,"on")||ISEQUAL(TIM_IRQ_COMP4E,"on")||...
        ISEQUAL(TIM_IRQ_CAPT1E,"on")||ISEQUAL(TIM_IRQ_CAPT2E,"on")||ISEQUAL(TIM_IRQ_DELE,"on")||ISEQUAL(TIM_IRQ_RESET_CPTE,"on")||ISEQUAL(TIM_IRQ_OUT1SE,"on")||ISEQUAL(TIM_IRQ_OUT1RE,"on")||ISEQUAL(TIM_IRQ_OUT2SE,"on")||ISEQUAL(TIM_IRQ_OUT2RE,"on")||...
        ISEQUAL(TIM_IRQ_UPDF,"on")||ISEQUAL(TIM_IRQ_REPF,"on")||ISEQUAL(TIM_IRQ_COMP1F,"on")||ISEQUAL(TIM_IRQ_COMP2F,"on")||ISEQUAL(TIM_IRQ_COMP3F,"on")||ISEQUAL(TIM_IRQ_COMP4F,"on")||...
        ISEQUAL(TIM_IRQ_CAPT1F,"on")||ISEQUAL(TIM_IRQ_CAPT2F,"on")||ISEQUAL(TIM_IRQ_DELF,"on")||ISEQUAL(TIM_IRQ_RESET_CPTF,"on")||ISEQUAL(TIM_IRQ_OUT1SF,"on")||ISEQUAL(TIM_IRQ_OUT1RF,"on")||ISEQUAL(TIM_IRQ_OUT2SF,"on")||ISEQUAL(TIM_IRQ_OUT2RF,"on") )
        %%First output is multiplexed for interrupt
        %assign OutputNum = 1
        %else
        %assign OutputNum = 0
        %endif

        %if (ISEQUAL(A_Used,"on") && ISEQUAL(A_Capture1,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer A Input Capture 1 */
        %<y> = %<HRTIM_Name>_DataLink.A_ICVal1;
        %endif
        %if (ISEQUAL(A_Used,"on") && ISEQUAL(A_Capture2,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer A Input Capture 2 */
        %<y> = %<HRTIM_Name>_DataLink.A_ICVal2;
        %endif
        %if (ISEQUAL(B_Used,"on") && ISEQUAL(B_Capture1,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer B Input Capture 1 */
        %<y> = %<HRTIM_Name>_DataLink.B_ICVal1;
        %endif
        %if (ISEQUAL(B_Used,"on") && ISEQUAL(B_Capture2,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer B Input Capture 2 */
        %<y> = %<HRTIM_Name>_DataLink.B_ICVal2;
        %endif
        %if (ISEQUAL(C_Used,"on") && ISEQUAL(C_Capture1,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer C Input Capture 1 */
        %<y> = %<HRTIM_Name>_DataLink.C_ICVal1;
        %endif
        %if (ISEQUAL(C_Used,"on") && ISEQUAL(C_Capture2,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer C Input Capture 2 */
        %<y> = %<HRTIM_Name>_DataLink.C_ICVal2;
        %endif
        %if (ISEQUAL(D_Used,"on") && ISEQUAL(D_Capture1,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer D Input Capture 1 */
        %<y> = %<HRTIM_Name>_DataLink.D_ICVal1;
        %endif
        %if (ISEQUAL(D_Used,"on") && ISEQUAL(D_Capture2,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer D Input Capture 2 */
        %<y> = %<HRTIM_Name>_DataLink.D_ICVal2;
        %endif
        %if (ISEQUAL(E_Used,"on") && ISEQUAL(E_Capture1,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer E Input Capture 1 */
        %<y> = %<HRTIM_Name>_DataLink.E_ICVal1;
        %endif
        %if (ISEQUAL(E_Used,"on") && ISEQUAL(E_Capture2,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer E Input Capture 2 */
        %<y> = %<HRTIM_Name>_DataLink.E_ICVal2;
        %endif
        %if (ISEQUAL(F_Used,"on") && ISEQUAL(F_Capture1,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer F Input Capture 1 */
        %<y> = %<HRTIM_Name>_DataLink.F_ICVal1;
        %endif
        %if (ISEQUAL(F_Used,"on") && ISEQUAL(F_Capture2,"on"))
        %assign y = LibBlockOutputSignal(OutputNum, "", "", 0)
        %assign OutputNum = %<OutputNum> + 1
        /* Get Timer F Input Capture 2 */
        %<y> = %<HRTIM_Name>_DataLink.F_ICVal2;
        %endif

        %if (ISEQUAL(A_Used,"on") && ISEQUAL(A_Mode,"Basic") && ISEQUAL(A_DutyIn1,"on"))
        %assign A_Duty1 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer A output Duty cycle 1  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, (uint32_t)(%<A_Duty1>));
        %endif
        %if (ISEQUAL(A_Used,"on") && ISEQUAL(A_Mode,"Basic") && ISEQUAL(A_DutyIn2,"on"))
        %assign A_Duty2 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer A output Duty cycle 2  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, (uint32_t)(%<A_Duty2>));
        %endif

        %if (ISEQUAL(B_Used,"on") && ISEQUAL(B_Mode,"Basic") && ISEQUAL(B_DutyIn1,"on"))
        %assign B_Duty1 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer B output Duty cycle 1  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, (uint32_t)(%<B_Duty1>));
        %endif
        %if (ISEQUAL(B_Used,"on") && ISEQUAL(B_Mode,"Basic") && ISEQUAL(B_DutyIn2,"on"))
        %assign B_Duty2 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer B output Duty cycle 2  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, (uint32_t)(%<B_Duty2>));
        %endif

        %if (ISEQUAL(C_Used,"on") && ISEQUAL(C_Mode,"Basic") && ISEQUAL(C_DutyIn1,"on"))
        %assign C_Duty1 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer C output Duty cycle 1  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, (uint32_t)(%<C_Duty1>));
        %endif
        %if (ISEQUAL(C_Used,"on") && ISEQUAL(C_Mode,"Basic") && ISEQUAL(C_DutyIn2,"on"))
        %assign C_Duty2 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer C output Duty cycle 2  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, (uint32_t)(%<C_Duty2>));
        %endif

        %if (ISEQUAL(D_Used,"on") && ISEQUAL(D_Mode,"Basic") && ISEQUAL(D_DutyIn1,"on"))
        %assign D_Duty1 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer D output Duty cycle 1  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, (uint32_t)(%<D_Duty1>));
        %endif
        %if (ISEQUAL(D_Used,"on") && ISEQUAL(D_Mode,"Basic") && ISEQUAL(D_DutyIn2,"on"))
        %assign D_Duty2 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer D output Duty cycle 2  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, (uint32_t)(%<D_Duty2>));
        %endif

        %if (ISEQUAL(E_Used,"on") && ISEQUAL(E_Mode,"Basic") && ISEQUAL(E_DutyIn1,"on"))
        %assign E_Duty1 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer E output Duty cycle 1  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, (uint32_t)(%<E_Duty1>));
        %endif
        %if (ISEQUAL(E_Used,"on") && ISEQUAL(E_Mode,"Basic") && ISEQUAL(E_DutyIn2,"on"))
        %assign E_Duty2 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer E output Duty cycle 2  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, (uint32_t)(%<E_Duty2>));
        %endif

        %if (ISEQUAL(F_Used,"on") && ISEQUAL(F_Mode,"Basic") && ISEQUAL(F_DutyIn1,"on"))
        %assign F_Duty1 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer F output Duty cycle 1  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_1, (uint32_t)(%<F_Duty1>));
        %endif
        %if (ISEQUAL(F_Used,"on") && ISEQUAL(F_Mode,"Basic") && ISEQUAL(F_DutyIn2,"on"))
        %assign F_Duty2 = LibBlockInputSignal(InputNum, "", "", 0)
        %assign InputNum = %<InputNum> + 1
        /* Update Timer F output Duty cycle 2  */
        __HAL_HRTIM_SETCOMPARE(&hhrtim%<timNum>, HRTIM_TIMERINDEX_TIMER_F, HRTIM_COMPAREUNIT_2, (uint32_t)(%<F_Duty2>));
        %endif

%endfunction

%else
%% ERROR HRTimers INIT MUST BE CALLED ONCE ONLY
   %trace ERROR HRTimers INIT MUST BE CALLED ONCE ONLY

%endif

%% [EOF] HRTimer_Config.tlc
