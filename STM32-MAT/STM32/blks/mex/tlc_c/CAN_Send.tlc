%% Abstract: CAN Send
%%    Activate the transmission request
%%    Generated code is based on STM32 HAL Library files.
%%
%% Copyright 1990-2009 The MathWorks, Inc.
%assign CodeFormat = "Embedded-C"
%implements CAN_Send "C"

%%warning "---------->Start CAN_Send"

%if !EXISTS(::InsertIncludesToCAN)
    %assign ::InsertIncludesToCAN  = TLC_TRUE
%endif 

%if !EXISTS(::InsertIncludesFromCAN)
    %assign ::InsertIncludesFromCAN  = TLC_TRUE
%endif 

%if !EXISTS(::IncludeCAN_MSG)
    %assign ::IncludeCAN_MSG  = TLC_TRUE
%endif 

%assign CAN_name =  SFcnParamSettings.CAN_name
%if !EXISTS(::VarDef_%<CAN_name>)
    %assign ::VarDef_%<CAN_name>  = TLC_TRUE
%endif 

%if !EXISTS(::SetActivateTxNotification_%<CAN_name>)
    %assign ::SetActivateTxNotification_%<CAN_name> = TLC_TRUE
%endif

%if !EXISTS(::SetStart_%<CAN_name>)
    %assign ::SetStart_%<CAN_name> = TLC_TRUE
%endif


%% For DEBUG purposes only.
%assign ::CAN_SEND_GENERATE_DEBUG_COUNTER = TLC_FALSE


%% Create function for CAN Send:

%% Code for system initialization:
%function Start(block,system) Output

    %assign CAN_name =  SFcnParamSettings.CAN_name
    %assign CAN_It = SFcnParamSettings.CAN_It

    %if (ISEQUAL(CAN_name, "CAN"))
        %assign CANNum = ""
    %else
        %assign CANNum = IDNUM("%<CAN_name>")[1]
    %endif
    {
    %if EXISTS(::SetActivateTxNotification_%<CAN_name>) && (::SetActivateTxNotification_%<CAN_name> == TLC_TRUE)
        %assign ::SetActivateTxNotification_%<CAN_name> = TLC_FALSE
        %if (ISEQUAL(CAN_It, "on"))
        %% INTERRUPT MODE
        /* Interrupt case. */
        /* Activate CAN TX notifications. */
        {
          const uint32_t activeITs = CAN_IT_TX_MAILBOX_EMPTY;
          if(HAL_CAN_ActivateNotification(&hcan%<CANNum>, activeITs) != HAL_OK) {
            Error_Handler();
          }
        }
        %endif
    %endif

    %if EXISTS(::SetStart_%<CAN_name>) && (::SetStart_%<CAN_name> == TLC_TRUE)
        %assign ::SetStart_%<CAN_name> = TLC_FALSE
        /* Start %<CAN_name>. */
        if(HAL_CAN_Start(&hcan%<CANNum>) != HAL_OK) {
          Error_Handler();
        }
    %endif
    }
%endfunction

%% Code for CAN configuration call:
%function BlockInstanceSetup(block, system) void

    %%model.c and model.h files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign modelH      = LibCreateSourceFile("Header", "Simulink", SrcBaseName)
    %assign modelC      = LibCreateSourceFile("Source", "Simulink", SrcBaseName)

    %%model_CAN.h and model_CAN.c files
    %assign SrcBaseName_CAN = "%<SrcBaseName>_CAN"
    %assign modelH_CAN      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_CAN)
    %assign modelC_CAN      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_CAN)

    %assign CAN_MsgType =  SFcnParamSettings.CAN_MsgType

    %%Include model.h to model_CAN.c
    %if EXISTS(::InsertIncludesToCAN) && (::InsertIncludesToCAN == TLC_TRUE)
        %assign ::InsertIncludesToCAN    = TLC_FALSE
        %openfile CAN_Buf
            #include "%<SrcBaseName>.h"
            #include "%<SrcBaseName_CAN>.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelC_CAN,"Includes",CAN_Buf)>
    %endif

    %%AND Include model_CAN.h to model.c
    %if EXISTS(::InsertIncludesFromCAN) && (::InsertIncludesFromCAN == TLC_TRUE)
        %assign ::InsertIncludesFromCAN    = TLC_FALSE
        %openfile CAN_Buf
            #include "%<SrcBaseName_CAN>.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelH,"Includes",CAN_Buf)>

        %openfile CAN_Buf
        #include "STM32_Config.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelH_CAN,"Includes",CAN_Buf)>
    %endif

    %if (ISEQUAL(CAN_MsgType, "on"))
    %if EXISTS(::IncludeCAN_MSG) && (::IncludeCAN_MSG == TLC_TRUE)
        %assign ::IncludeCAN_MSG    = TLC_FALSE
        %openfile CAN_Buf
            #include "can_message.h"
        %closefile CAN_Buf
        %<LibSetSourceFileSection(modelH_CAN,"Includes",CAN_Buf)>
    %endif
    %endif

    %%Then build model_CAN.h and model_CAN.c
    %assign CAN_name =  SFcnParamSettings.CAN_name
    %assign CAN_It =  SFcnParamSettings.CAN_It

%% Code for required CAN external definition: in model_CAN.c file
%if (ISEQUAL(CAN_name, "CAN"))
    %assign CANNum = ""
%else
    %assign CANNum = IDNUM("%<CAN_name>")[1]
%endif

%if EXISTS(::VarDef_%<CAN_name>) && (::VarDef_%<CAN_name> == TLC_TRUE)
    %assign ::VarDef_%<CAN_name>    = TLC_FALSE
    %openfile CAN_Buf
        /* %<CAN_name> handler declaration. */
        extern CAN_HandleTypeDef hcan%<CANNum>;
    %closefile CAN_Buf
    %<LibSetSourceFileSection(modelH_CAN,"Defines",CAN_Buf)>
%endif

%endfunction

%% Function: Outputs ==========================================
%% Abstract:
%% Activate the transmission request.
%%
%function Outputs(block, system) Output

    %%model_CAN.h and model_CAN.c files
    %assign SrcBaseName = LibGetMdlSrcBaseName()
    %assign SrcBaseName_CAN = "%<SrcBaseName>_CAN"
    %assign modelH_CAN      = LibCreateSourceFile("Header", "Simulink", SrcBaseName_CAN)
    %assign modelC_CAN      = LibCreateSourceFile("Source", "Simulink", SrcBaseName_CAN)

    %assign CAN_name =  SFcnParamSettings.CAN_name
    %assign CAN_It =  SFcnParamSettings.CAN_It
    %assign CAN_MsgType =  SFcnParamSettings.CAN_MsgType

    %if (ISEQUAL(CAN_name, "CAN"))
        %assign CANNum = ""
    %else
        %assign CANNum = IDNUM("%<CAN_name>")[1]
    %endif

    {
      CAN_TxHeaderTypeDef txHeader = {0};
      uint32_t txMailbox = 0;
      uint8_t txData[8] = {0};

    %if (ISEQUAL(CAN_MsgType, "on"))
        %assign inCanMsg = LibBlockInputSignal(0, "", "", 0)
        /* Build frame to send (CAN_MsgType set to %<CAN_MsgType>). */
        if(%<inCanMsg>.Extended == CAN_ID_STD) {
          txHeader.StdId = (uint32_t)%<inCanMsg>.ID;
          txHeader.ExtId = (uint32_t)0;
          txHeader.IDE = CAN_ID_STD;
        } else {
          txHeader.StdId = (uint32_t)0;
          txHeader.ExtId = (uint32_t)%<inCanMsg>.ID;
          txHeader.IDE = CAN_ID_EXT;
        }

        txHeader.RTR = (uint32_t)%<inCanMsg>.Remote;
        txHeader.DLC = (uint32_t)%<inCanMsg>.Length;
        txHeader.TransmitGlobalTime = DISABLE;

        memcpy(txData, %<inCanMsg>.Data, (size_t)%<inCanMsg>.Length);
    %else
        %assign inStandExt = LibBlockInputSignal(0, "", "", 0)
        %assign inIdeBit = LibBlockInputSignal(1, "", "", 0)
        %assign inDataRequest = LibBlockInputSignal(2, "", "", 0)
        %assign inNbData = LibBlockInputSignal(3, "", "", 0)

        /* Build frame to send */
        if(%<inStandExt> == CAN_ID_STD) {
            txHeader.StdId = (uint32_t)%<inIdeBit>;
            txHeader.ExtId = (uint32_t)0;
            txHeader.IDE = CAN_ID_STD;
        } else {
            txHeader.StdId = (uint32_t)0;
            txHeader.ExtId = (uint32_t)%<inIdeBit>;
            txHeader.IDE = CAN_ID_EXT;
        }

        txHeader.RTR = (uint32_t)%<inDataRequest>;
        txHeader.DLC = (uint32_t)%<inNbData>;
        txHeader.TransmitGlobalTime = DISABLE;

        %assign rollVars = ["U"]
        %roll sigIdx = RollRegions, lcv = RollThreshold, block, ...
            "Roller", rollVars
        %assign inData = LibBlockInputSignal(4, "", lcv, sigIdx)
        txData[%<sigIdx>] = %<inData>;
        %endroll
    %endif
        {

%if ::CAN_SEND_GENERATE_DEBUG_COUNTER == TLC_TRUE
          /* For debug. */
          static volatile uint32_t DEBUG_%<CAN_name>_AddTxMessageCount = 0;
          DEBUG_%<CAN_name>_AddTxMessageCount++;
%endif

          /* Request transmission. */
          if(HAL_CAN_AddTxMessage(&hcan%<CANNum>, &txHeader, &txData[0], &txMailbox)!= HAL_OK) {
            Error_Handler();
          }
        }
    %if (ISEQUAL(CAN_It, "off"))
    %% POLLING ON END OF TRANSMIT
        /* Wait transmission complete, on this mailbox. */
        while(HAL_CAN_IsTxMessagePending(&hcan%<CANNum>, txMailbox) == 1);
    %endif
  }
%endfunction

%% [EOF] CAN_Send.tlc
